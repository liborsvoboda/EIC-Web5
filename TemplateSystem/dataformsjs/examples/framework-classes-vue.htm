<!doctype html>
<html
    lang="en"
    data-show-errors>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Framework Classes and ES6 Examples - Vue</title>
        <link rel="stylesheet" href="css/app-layout-1.css">
    </head>
    <body>
        <header>
            <nav>
                <a class="active" href="#/">Home</a>
                <a href="#/calc">Calculator</a>
                <a href="#/time">Time</a>
                <a href="#/data">Data</a>
            </nav>
        </header>

        <main id="view" class="container"></main>

        <template id="loading-screen">
            <h3 class="loading">Loading...</h3>
        </template>

        <script type="text/x-template" data-engine="vue" id="error-screen">
            <h3 class="error">{{errorMessage}}</h3>
        </script>

        <template data-route="/">
            <section class="max-width-500 flex-col">
                <h1>DataFormsJS Framework Demo using Vue with ES6 Code and JavaScript Classes</h1>
                <p>Originally the DataFormsJS Framework was designed and developed prior to ES6 being supported among Web Browsers. Because of this custom app code was designed around ES5. An update in early 2022 allows for custom app code (Pages and Plugins) to use classes rather than objects. This app is a demo of class-based code for the DataFormsJS Framework. View page source for details and JavaScript code.</p>
            </section>
        </template>

        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/calc"
            data-page="calculator"
            data-lazy-load="calculator, dataBind">

            <section class="flex-col-600">
                <input v-model="currentX" placeholder="Value X" size="7">
                <select v-model="currentOp">
                    <option value="+">Add (+)</option>
                    <option value="-">Subtract (-)</option>
                    <option value="*">Multiply (*)</option>
                    <option value="/">Divide (/)</option>
                </select>
                <input v-model="currentY" placeholder="Value Y" size="7">
                <button v-on:click="calculateResult">Calculate</button>
            </section>
            
            <section class="calc-result" v-if="results.length">
                <ul class="record-list">
                    <li v-for="item in results" v-bind:class="item.hasError ? 'error' : ''">
                        {{ item.x }} {{ item.op }} {{ item.y }} = {{ item.z }}
                    </li>
                </ul>
            </section>
        </script>

        <template
            data-route="/time"
            data-lazy-load="time">
            
            <section data-time="en-US"></section>
            <section data-time="zh"></section>
            <section data-time="ar"></section>
        </template>

        <!--
            This page uses the `JsonData` page class instead of the `jsonData` page object.
            Using "jsonData" for both [data-page] and [data-lazy-load] will cause the `jsonData`
            version to be used. There is no difference in features. `JsonData` would be used
            if an app is using classes for page development and needed to extend from `JsonData`.
        -->
        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/data"
            data-page="JsonData"
            data-url="https://www.dataformsjs.com/data/geonames/countries"
            data-load-only-once
            data-countries
            data-lazy-load="JsonData, flags, filter, sort, clickToHighlight, vueDirectives">

            <section v-if="isLoading">Loading</section>
            <section v-if="hasError">{{ errorMessage }}</section>
            <section v-if="isLoaded" class="flex-col">
                <input
                    class="max-width-300 mt-0"
                    data-filter-selector="table"
                    data-filter-results-text-selector="h1"
                    data-filter-results-text-all="{totalCount} Countries"
                    data-filter-results-text-filtered="Showing {displayCount} of {totalCount} Countries"
                    placeholder="Enter filter, example 'North America'">

                <table
                    class="mt-15"
                    data-sort
                    data-sort-class-odd="row-odd"
                    data-sort-class-even="row-even">
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Name</th>
                            <th class="text-right">Size (KM)</th>
                            <th class="text-right">Population</th>
                            <th>Continent</th>
                        </tr>
                    </thead>
                    <tbody class="click-to-highlight">
                        <tr v-for="country in countries">
                            <td>{{ country.iso }}</td>
                            <td>
                                <i v-bind:class="country.iso.toLowerCase() + ' flag'"></i>
                                <span>{{ country.country }}<span>
                            </td>
                            <td class="text-right" v-bind:data-value="country.area_km" v-format-number="country.area_km"></td>
                            <td class="text-right" v-bind:data-value="country.population" v-format-number="country.population"></td>
                            <td>{{ country.continent }}</td>
                        </tr>
                    </tbody>
                </table>
            </section>
        </script>

        <!--
            Vue
            https://vuejs.org/

            DataFormsJS works with both Vue 2 and Vue 3
        -->
        <!-- <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js"></script> -->
        <script src="https://cdn.jsdelivr.net/npm/vue@3.2.30/dist/vue.global.prod.js"></script>

        <!--
            DataFormsJS
            https://www.dataformsjs.com/
        -->
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/DataFormsJS.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/navLinks.min.js"></script>
        <script>
            app.lazyLoad = {
                calculator: 'framework-classes-calc-page.js',
                time: 'framework-classes-time-plugin.js',
                dataBind: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/dataBind.min.js',
                jsonData: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/pages/jsonData.min.js',
                JsonData: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/pages/classes/JsonData.js',
                flags: 'https://cdn.jsdelivr.net/npm/semantic-ui-flag@2.4.0/flag.min.css',
                filter: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/filter.min.js',
                sort: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/sort.min.js',
                clickToHighlight: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/clickToHighlight.min.js',
                vueDirectives: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/vue-directives.min.js',
            };
            app.settings.lazyTemplateSelector = '#loading-screen';
        </script>

        <!-- Show a warning for Older browsers (IE, Older Mobile Devices, etc) -->
        <script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/old-browser-warning.min.js"></script>
    </body>
</html>
