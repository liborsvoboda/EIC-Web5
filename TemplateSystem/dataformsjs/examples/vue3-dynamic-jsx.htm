<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Vue 3 JSX Testing</title>
        <style>
            * { margin:0; padding:0; }

            html {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
            }

            body {
                background-color: #efefef;
                background-image: linear-gradient(180deg, hsla(0, 0%, 100%, .6) 1%, hsla(0, 0%, 100%, .5) 30%,#fff), linear-gradient(25deg, #ffdbe7, #a9d9ff 32%,#f3eba6);
            }

            h1 { margin-bottom: 1em; }
            p { margin:.5em auto; }

            body,
            section {
                display: flex;
                flex-direction: column;
                align-items: center;
            }

            section {
                box-shadow: 0 1px 5px 0 rgba(0,0,0,.5);
                padding: 30px 60px;
                margin: 40px;
                border-radius: 20px;
                background-color: white;
            }

            button { padding:.5em 1em; margin:1em; margin-top:0; }

            .error {
                padding: 1em;
                color: white;
                background-color: red;
                border: 1px solid darkred;
            }

            .markdown-editor {
                border: 1px solid black;
                margin: 1em;
                padding: 1em;
            }
            .markdown-editor textarea {
                padding: 1em;
            }
            .markdown-content {
                margin-top: 1em;
            }
        </style>
    </head>
    <body>
        <section id="root" class="container"></section>

        <script type="text/babel" id="welcome-content">
            // @jsx Vue.h
            const issueLink = 'https://github.com/dataformsjs/dataformsjs/issues/16';
            function App() {
                return (
                    <Vue.Fragment>
                        <h1>Vue 3 using the jsxLoader</h1>
                        <p>This page contains Vue 3 Demos built using JSX and uses lower-level API from the jsxLoader.</p>
                        <p>Each example will be rendered or fully re-rendered on button clicks.</p>
                        <p><a href="https://github.com/vuejs/jsx/issues/141" target="_blank">Vue 3 JSX Design</a></p>
                        <p><a href={issueLink} target="_blank">{issueLink}</a></p>
                    </Vue.Fragment>
                )
            }

            Vue.render(
                <App />,
                document.getElementById('root')
            );
        </script>

        <section class="container example-code">
            <button>Click Button 1</button>
            <div class="target"></div>
            <script type="text/babel">
                function App() {
                    return (<h2>Clicked Button 1 at {new Date().toLocaleString()}!</h2>)
                }
            </script>
        </section>

        <section class="container example-code">
            <button>Click Button 2</button>
            <div class="target"></div>
            <script type="text/babel">
                function App() {
                    return <h2>Clicked Button 2 at {new Date().toLocaleTimeString()}!</h2>
                }
            </script>
        </section>

        <section class="container example-code">
            <button>Import Custom Components</button>
            <div class="target"></div>
            <script type="text/babel">
                import MyCounter from 'my-counter'
                import HelloWorld from 'hello-world'

                function App() {
                    return (<div style={{textAlign:'center'}}>
                        <MyCounter />
                        <MyCounter />
                        <HelloWorld />
                        <HelloWorld name="Barthélémy" color="blue" />
                    </div>)
                }
            </script>
        </section>

        <!--
            Component Source From:
            https://mrcrmn.dev/articles/lightweight-components-with-vue3-and-jsx/

            NOTE - `Vue.defineComponent` is not required and was created
            for use with TypeScript: https://v3.vuejs.org/guide/typescript-support.html#defining-vue-components
        -->
        <script type="text/babel" data-vue-component="my-counter">
            export default Vue.defineComponent({
                data() {
                    return {
                        count: 0
                    }
                },

                methods: {
                    increment() {
                        this.count++
                    }
                },

                render() {
                    return (
                        <div>
                            <button onClick={this.increment}>Increment</button>
                            <span>Count: {this.count}</span>
                        </div>
                    )
                }
            })
        </script>

        <script type="text/babel" data-vue-component="hello-world">
            export default {
                props: {
                    name: {
                        type: String,
                        default: 'World',
                        required: false,
                    },
                    color: {
                        type: String,
                        default: 'red',
                        required: false,
                    },
                },

                render() {
                    return (
                        <div style={{color:this.color}}>Hello {this.name}</div>
                    )
                }
            }
        </script>

        <section class="container example-code">
            <button>Render Markdown using Imported Library</button>
            <div class="target"></div>
            <script type="text/babel">
                import md from 'markdown-it'

                const Markdown = {
                    props: {
                        content: {
                            type: String,
                            required: true,
                        },
                    },
                    data() {
                        return {
                            userContent: this.content
                        }
                    },
                    methods: {
                        handleInput(e) {
                            this.userContent = e.target.value;
                        }
                    },
                    computed: {
                        renderedMarkdown() {
                            return md.render(this.userContent);
                        }
                    },
                    render() {
                        return <div className="markdown-editor">
                                <textarea rows="4" cols="40" value={this.userContent} onInput={this.handleInput} />
                                <div className="markdown-content" innerHTML={this.renderedMarkdown}></div>
                            </div>
                    }
                }

                function App() {
                    return <>
                            <Markdown content="# **Hello World from <Markdown>**" />
                            <Markdown content="## _Hello World from <Markdown>_" />
                        </>
                }
            </script>
        </section>

        <section class="container example-code">
            <button>Compile Error</button>
            <div class="target"></div>
            <script type="text/babel">
                function App() {
                    return (
                        <Vue.Fragment>
                            <h2>Clicked Button 1 at {new Date().toLocaleString()}!</h2>
                        </Vue.Fragment2>
                    )
                }
            </script>
        </section>

        <section class="container example-code">
            <button>Runtime Error</button>
            <div class="target"></div>
            <script type="text/babel">
                function App() {
                    return (
                        <Vue.Fragment>
                            <h2>Clicked Button 2 at {new Date().toLocaleStrings()}!</h2>
                        </Vue.Fragment>
                    )
                }
            </script>
        </section>

        <!--
            Vue 3 - Dev Version:
                <script src="https://cdn.jsdelivr.net/npm/vue@3.0.2/dist/vue.global.js"></script>
            Vue 3 - Prod Version:
                <script src="https://cdn.jsdelivr.net/npm/vue@3.0.2/dist/vue.global.prod.js"></script>

            ** Currently using Development to see error details on the runtime error example
        -->
        <script src="https://cdn.jsdelivr.net/npm/vue@3.0.2/dist/vue.global.js"></script>
        <!-- <script src="https://cdn.jsdelivr.net/npm/vue@3.0.2/dist/vue.global.prod.js"></script> -->

        <!-- DataFormsJS jsxLoader -->
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/jsxLoader.min.js"></script>


        <!--
            https://github.com/markdown-it/markdown-it
        -->
        <script src="https://cdn.jsdelivr.net/npm/markdown-it@12.0.2/dist/markdown-it.min.js"></script>

        <!--
            Warning for IE 11 and Old Mobile Devices because the tested build of Vue 3.0.0
            does not support them, this may or may not change in the future.
        -->
        <script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/old-browser-warning.min.js"></script>

        <script>
            // Set this to `true` from DevTools to see basic
            // transformed JS code for this page in the console.
            window.showCode = false;

            // By default jsxLoader will check the environment and then download
            // Polyfills and Babel Standalone if needed during 'DOMContentLoaded'.
            // This page does not need scripts to load automatically so automatically
            // loading is cancelled by using specific jsxLoader API.
            jsxLoader.isSupportedBrowser = true;
            jsxLoader.needsPolyfill = false;
            jsxLoader.setup = function(){};

            // By default jsxLoader uses `React.createElement` and `React.Fragment`
            jsxLoader.compiler.pragma = 'Vue.h';
            jsxLoader.compiler.pragmaFrag = 'Vue.Fragment';

            // Optional to prevent jsxLoader from skipping one-line JSX code
            // blocks with specific JS. Not needed in this demo.
            //
            // jsxLoader.compiler.isMinimized = function() { return false; };

            // Set these to `true` to view compiler details.
            //
            // Full Documentation at:
            //    https://github.com/dataformsjs/dataformsjs/blob/master/docs/jsx-loader.md
            //
            jsxLoader.logCompileTime = false;
            // `logCompileTime applies only to scripts that are loaded from the initial page
            // load scripts that are added to the page from `jsxLoader.loadScript(element)`.
            //
            jsxLoader.logCompileDetails = false;
            // *) Tokens generated from Lexical Analysis
            // *) Abstract Syntax Tree (AST) generated from the Tokens
            // *) Generated Code from the AST (Only on scripts that load from initial page load)

            (function() {
                'use strict';

                function setupCodeSection(section) {
                    const button = section.querySelector('button');
                    const target = section.querySelector('.target');
                    const template = section.querySelector('script[type="text/babel"]');
                    if (button === null || target === null || template === null) {
                        return;
                    }

                    button.onclick = () => {
                        if (target.id === '') {
                            target.id = 'target-' + new Date().getTime();
                        }

                        // Hide previous error if any
                        target.classList.remove('error');

                        // Get template
                        let jsx = template.innerHTML;

                        // Use Regex to determine if components on this page should be included.
                        // This is a basic demo and not designed to handle all scenarios including:
                        //  - Duplicate 'import' of the same Component
                        //  - Missing Components
                        //  - Non-English or special characters
                        const regex = /import ([a-zA-Z0-9-_]*) from ('|")([a-zA-Z0-9-_]*)('|")/gm;
                        let match;
                        while ((match = regex.exec(jsx)) !== null) {
                            const importStatement = match[0];
                            const componentName = match[1];
                            const componentImport = match[3];
                            let componentJsx;
                            switch (componentImport) {
                                case 'markdown-it':
                                    componentJsx = `const ${componentName} = window.markdownit()`;
                                    break;
                                default:
                                    componentJsx = document.querySelector(`[data-vue-component="${componentImport}"]`);
                                    if (componentJsx) {
                                        componentJsx = componentJsx.innerHTML;
                                        componentJsx = componentJsx.replace('export default ', `const ${componentName} = `);
                                    } else {
                                        target.innerHTML = '';
                                        target.textContent = `Error - Unable to import component: ${componentImport}`;
                                        target.classList.add('error');
                                        return;
                                    }
                            }
                            jsx = jsx.replace(importStatement, componentJsx);
                        }
                        jsx += '\n Vue.render(<App />, document.getElementById("' + target.id + '"));';

                        // Compile/Transform JSX to JS and evaluate
                        try {
                            // Compile
                            var js = jsxLoader.compiler.compile(jsx);
                            if (window.showCode) {
                                console.log('-'.repeat(80));
                                console.log(js);
                            }

                            // Reset
                            target.innerHTML = '';

                            // Both `eval()` and `new Function()` work with
                            // most recent versions of Chrome and Firefox:
                            //
                            // eval(js);
                            new Function(js)();

                            // Check for Runtime error. This can happen if using the
                            // production version of Vue. When using the Dev build of Vue
                            // the error will be raised instead.
                            var renderedHtml = target.innerHTML;
                            if (renderedHtml === '' || renderedHtml === '<!---->') {
                                target.textContent = 'Runtime Error - Check Console';
                                target.classList.add('error');
                            }
                        } catch (e) {
                            // Show Error
                            target.textContent = 'Error - ' + e.message;
                            target.classList.add('error');
                            console.error(e);
                        }
                    }
                }

                document.addEventListener('DOMContentLoaded', function() {
                    // Normally when using jsxLoader this would happen automatically,
                    // however automatic loading is turned off for this page.
                    jsxLoader.loadScript(document.querySelector('script#welcome-content'));

                    // Setup all code examples
                    var sections = document.querySelectorAll('section.example-code');
                    Array.prototype.forEach.call(sections, function(section) {
                        setupCodeSection(section);
                    });
                });
            })();
        </script>
    </body>
</html>