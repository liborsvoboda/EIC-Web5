<!doctype html>
<html
    lang="en"
    data-show-errors
    data-i18n-default="en"
    data-i18n-locales="en,ja,es,pt-BR,ar,fr,zh-CN"
    data-i18n-file="countries">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title data-i18n="Countries Demo | Vue"></title>
        <link rel="stylesheet" href="css/countries.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui-flag@2.4.0/flag.min.css">
        <link rel="canonical" href="https://www.dataformsjs.com/examples/places-demo-hbs.htm">
    </head>
    <body>
        <div id="view" dir="auto"></div>

        <!--
            For Vue including the attributes such as [data-countries] and [data-regions]
            are defined in the template so that Vue creates Watchers for them.

            For this page these properties are typically defined dynamically for the
            model after the JSON service downloads the data. In some pages defining dynamic
            properties may not be needed however it is recommended when using Vue to
            avoid unexpected rendering issues.

            [data-file-name] is used with [id="download-links"] which is defined
            later on this page.
        -->

        <script
            type="text/x-template"
            data-engine="vue"
            data-default-route
            data-route="/:lang/"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/countries"
            data-load-only-once
            data-countries
            data-file-name="Countries">

            <h3 v-if="isLoading" v-i18n="'Loading...'"></h3>
            <p v-if="hasError"><span v-i18n="'Error'"></span> - {{ errorMessage }}</p>
            <div v-if="isLoaded" class="flex-col">
                <h1 v-i18n="'Countries'"></h1>

                <nav>
                    <a v-bind:href="'#/' + i18n_Locale + '/search'" v-i18n="'Search'"></a>
                    <a v-bind:href="'#/' + i18n_Locale + '/info'" v-i18n="'Info'"></a>
                    <div class="ml-20" data-template-id="download-links"></div>
                </nav>

                <input
                    data-filter-selector="table"
                    data-filter-results-text-selector="h1"
                    data-filter-results-text-all="{totalCount} Countries"
                    data-filter-results-text-filtered="Showing {displayCount} of {totalCount} Countries"
                    placeholder="Enter filter, example 'North America'"
                    v-i18n-attr="'data-filter-results-text-all, data-filter-results-text-filtered, placeholder'">

                <table data-sort data-sort-class-odd="row-odd" data-sort-class-even="row-even" class="click-to-highlight">
                    <thead>
                        <tr>
                            <th v-i18n="'Code'"></th>
                            <th v-i18n="'Name'"></th>
                            <th v-i18n="'Size (KM)'"></th>
                            <th v-i18n="'Population'"></th>
                            <th v-i18n="'Continent'"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="country in countries">
                            <td>
                                <i v-bind:class="country.iso.toLowerCase() + ' flag'"></i>
                                <a v-bind:href="'#/' + i18n_Locale + '/regions/' + country.iso">{{ country.iso }}</a>
                            </td>
                            <td>{{ country.country }}</td>
                            <td class="align-right" v-bind:data-value="country.area_km" v-format-number="country.area_km"></td>
                            <td class="align-right" v-bind:data-value="country.population" v-format-number="country.population"></td>
                            <td>{{ country.continent }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </script>

        <!--
            This is an HTML Control which is similar in concept to a Vue or React Component.
            This control ends up being included when [data-template-id="download-links"]
            is used on the page's HTML.

            How it works is DataFormsJS will render all HTML Controls prior to setting
            up Vue for the page. [v-bind:data-export-file-name] then uses the attribute
            [data-file-name] which is defined on the route to set the attribute value.

            Then the DataFormsJS plugin [i18n] handles [v-i18n-attr] to set the value
            to the users selected langue. Additionally plugins [exportToExcel, exportToCsv]
            are used with this content and set once the page is rendered.
        -->
        <script type="text/x-template" data-engine="vue" id="download-links">
            <span class="download" v-i18n="'Download'"></span>
            <img class="download"
                src="img/Excel.svg"
                height="16"
                width="16"
                alt="Download to Excel"
                title="Download to Excel"
                data-export-excel-selector="table"
                v-bind:data-export-file-name="'[[' + fileName + ']].xlsx'"
                v-i18n-attr="'alt, title, data-export-file-name'">
            <img class="download"
                src="img/CSV.svg"
                height="16"
                width="16"
                alt="Download to CSV"
                title="Download to CSV"
                data-export-csv-selector="table"
                v-bind:data-export-file-name="'[[' + fileName + ']].csv'"
                v-i18n-attr="'alt, title, data-export-file-name'">
        </script>

        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/regions/:country"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/regions/:country"
            data-load-only-once
            data-regions
            data-file-name="Regions"
            src="html/regions-vue.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/cities/:country/:region"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/cities/:country/:region"
            data-load-only-once
            data-cities
            data-file-name="Cities"
            src="html/cities-vue.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/city/:id"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/place/:id"
            data-load-only-once
            data-lazy-load="leafletCss, leafletJs, leafletPlugin"
            data-place
            data-fields
            src="html/place-vue.htm">
        </script>

        <!--
            This template defines "null" value for [data-cities] because
            it is used in a [v-if] statement for search logic. This allows
            the related element to be hidden until a search is performed.
        -->
        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/search"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/countries?order_by=country"
            data-load-only-once
            data-lazy-load="json_data, keydownAction, chosen, chosenPlugin"
            data-countries="null"
            data-cities="null"
            data-file-name="Search"
            src="html/search-places-vue.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/info"
            data-src="html/places-info-vue.htm">
        </script>

        <template id="loading-spinner-screen">
            <div class="loading">
                <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            </div>
        </template>

        <!--
            https://vuejs.org
            DataFormsJS works with both Vue 2 and Vue 3
        -->
        <!-- <script src="https://cdn.jsdelivr.net/npm/vue@3.2.30/dist/vue.global.prod.js"></script> -->
        <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js"></script>

        <!-- DataFormsJS -->
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/DataFormsJS.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/pages/jsonData.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/vue-directives.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/format.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/i18n.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/filter.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/sort.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/clickToHighlight.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/exportToCsv.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/exportToExcel.min.js"></script>
        <script>
            // Lazy Load the following scripts only if needed based on attribute [data-lazy-load].
            // When scripts need to be downloaded in a specific order then use an array otherwise
            // one script per key is recommended. When a controller uses multiple lazy load items
            // they are downloaded asynchronous however items in the array are download only after
            // the previous item is loaded.
            app.lazyLoad = {
                chosen: [
                    // [jquery] must be included before [chosen] and [countries-chosen.css]
                    // must be loaded after [chosen.css].
                    'https://code.jquery.com/jquery-3.4.1.min.js',
                    'https://cdn.jsdelivr.net/npm/chosen-js@1.8.7/chosen.css',
                    'https://cdn.jsdelivr.net/npm/chosen-js@1.8.7/chosen.jquery.min.js',
                    'css/countries-chosen.css',
                ],
                chosenPlugin: [
                    // For this demo the [dataBind] plugin is loaded before [chosen]
                    // to make sure that the <select> value will be set before the chosen
                    // control is created. Otherwise the following jQuery code would have
                    // to be called to trigger the update.
                    //     $('.chosen-select').trigger('chosen:updated');
                    //
                    'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/dataBind.min.js',
                    'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/chosen.min.js',
                ],
                keydownAction: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/keydownAction.min.js',
                json_data: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/controls/json-data.min.js',
                leafletCss: 'https://cdn.jsdelivr.net/npm/leaflet@1.5.1/dist/leaflet.css',
                leafletJs: 'https://cdn.jsdelivr.net/npm/leaflet@1.5.1/dist/leaflet.js',
                leafletPlugin: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/leaflet.min.js',
            };
            app.settings.lazyTemplateSelector = '#loading-spinner-screen';
        </script>
    </body>
</html>