{
    "AI/ML Image Classification | Handlebars": "AI / ML画像分類 | Handlebars",
    "AI/ML Image Classification | Vue": "AI / ML画像分類 | Vue",
    "AI/ML Image Classification | React": "AI / ML画像分類 | React",
    "Images": "画像",
    "Categories": "カテゴリー",
    "Image Prediction Demo": "画像予測デモ",
    "Info": "情報",
    "Uploading...": "アップロード中...",
    "Loading...": "読み込み中...",
    "Error": "エラー",
    "{totalCount} Image Categories": "{totalCount}画像カテゴリ",
    "Showing {displayCount} of {totalCount} Image Categories": "{totalCount}画像カテゴリの{displayCount}を表示しています",
    "Enter filter, example [dog] or [cat]": "フィルタを入力してください、例[dog]または[cat]",
    "Image Classification Info": "画像分類情報",
    "Overview": "概要",
    "Links": "リンク集",
    "info_1": "AI =人工知能/ ML =機械学習",
    "info_2": "このページでは、JSON WebサービスページをDataFormsJSで拡張してカスタムJavaScriptコードを含める方法を示します。",
    "info_3": "このページは、JSONサービスからサンプル画像と結果をダウンロードし、PyTorchを使用してPythonで構築されたAI / ML画像分類Webサービスへのアップロード画像からの予測を可能にします。",
    "info_4": "画像をアップロードすると、1,000の異なるカテゴリと照合されます。 カテゴリの1つと一致しない画像がアップロードされた場合、モデルは既知のカテゴリとしか一致しないため、結果が不正確になる可能性があります。 たとえば、イルカの写真は、ホオジロザメとして中程度の確率で分類されます。",
    "info_5": "理想的には、画像の主要なアイテムが中央にあり、写真の焦点が合っていると、結果の精度が低下します。",
    "info_6": "アップロードした画像は自分だけに限定され、処理されるとすぐにサーバーから削除されます。",
    "info_7": "予測には時間がかかるので、アップロードする画像ごとに1秒以上かかります。",
    "info_8": "画像分類に使用されるモデルは、事前にトレーニングされたImageNet重みを使用したResNet50です。 ResNet50は、画像分類に広く使用されているよく知られた畳み込みニューラルネットワークです。",
    "info_9": "HandlebarsとVueを使用して構築されたデモページは、コア[jsonData.js]ページオブジェクトを拡張する[image-classification.js]のカスタムページ[imagePredictionPage]を定義します。 DataFormsJS Frameworkを使用する場合、これは既存のWebサービスにカスタムJavaScriptを追加するための一般的で推奨される方法です。",
    "info_10": "Reactデモは、[image-home-react.jsx]でカスタムページコンポーネントを定義します。 カスタムページコンポーネント<ShowImages>は<JsonData>。[isLoaded]に使用され、[props.handleChange（）]を呼び出すときに<JsonData>コンポーネントの状態を設定することにより、ダウンロード後にデータを更新します。 さらに、[loadOnlyOnce = {true}]がWebサービスに使用されるため、状態はURLにリンクされ、データは1回だけダウンロードされます。 メインページの状態は、別のページに移動した場合にメモリに保持され、クリックすると再び表示されます。",
    "info_11": "The Web Components demo shows how basic functions can be used with the <json-data> [onready] attribute and additional minimal DataFormsJS API to create the same app as using the standard DataFormsJS Framework and React Components.",
    "info_12": "UnsplashのJay Wenningtonによるパンダ写真",
    "info_13": "UnsplashのSamuel Ferraraによるスキーと山の写真",
    "prob_high": "> = 67％の確率",
    "prob_med": "> = 33％および<67％",
    "prob_low": "<33％の確率",
    "source_code": "ソースコード",
    "src_js_vue_hbs": "JavaScript（VueおよびHandlebarsJS）"
}