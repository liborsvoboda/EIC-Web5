<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Countries Demo | No SPA | Vue</title>
    <link rel="stylesheet" href="css/countries.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui-flag@2.4.0/flag.min.css">
    <link rel="canonical" href="https://www.dataformsjs.com/examples/countries-no-spa-hbs.htm">
</head>
<body>
    <div id="view">
        <h1>Countries</h1>

        <!--
            [countries] is a property that comes from the web service.
            By including [data-countries] the <json-data> control will
            create at as instance property with a Vue watcher.

            The other properties used in the related template:
            [isLoading, hasError, isLoaded, errorMessage] are defined
            by the <json-data> control.

            This example will also work if the Vue template is embedded
            directly within the <json-data> element. To keep the code organized
            and easier to read it is in a seperate <script> element.
        -->
        <json-data
            data-url="https://www.dataformsjs.com/data/geonames/countries"
            data-template-id="countries-list"
            data-countries
            v-clock>
        </json-data>
    </div>

    <script type="text/x-template" data-engine="vue" id="countries-list">
        <div v-if="isLoading">Loading...</div>
        <div v-if="hasError" class="error">{{ errorMessage }}</div>
        <div v-if="isLoaded" class="flex-col">
            <input
                data-filter-selector="table"
                data-filter-results-text-selector="h1"
                data-filter-results-text-all="{totalCount} Countries"
                data-filter-results-text-filtered="Showing {displayCount} of {totalCount} Countries"
                placeholder="Enter filter, example 'North America'">

            <div>
                <nav style="display: inline-flex;">
                    <span>Download</span>
                    <img class="download"
                        src="img/Excel.svg"
                        height="16"
                        width="16"
                        alt="Download to Excel"
                        title="Download to Excel"
                        data-export-excel-selector="table"
                        data-export-file-name="Countries.xlsx">
                    <img class="download"
                        src="img/CSV.svg"
                        height="16"
                        width="16"
                        alt="Download to CSV"
                        title="Download to CSV"
                        data-export-csv-selector="table"
                        data-export-file-name="Countries.csv">
                </nav>
            </div>

            <p>Click on a column to sort rows based on column values.</p>

            <table data-sort data-sort-class-odd="row-odd" data-sort-class-even="row-even" class="click-to-highlight">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Size (KM)</th>
                        <th>Population</th>
                        <th>Continent</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="country in countries">
                        <td>
                            <i v-bind:class="country.iso.toLowerCase() + ' flag'"></i>
                            <span>{{ country.iso }}</span>
                        </td>
                        <td>{{ country.country }}<span></td>
                        <td class="align-right" v-bind:data-value="country.area_km" v-format-number="country.area_km"></td>
                        <td class="align-right" v-bind:data-value="country.population" v-format-number="country.population"></td>
                        <td>{{ country.continent }}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </script>

    <!--
        https://vuejs.org
        DataFormsJS works with both Vue 2 and Vue 3
        <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/vue@3.2.30/dist/vue.global.prod.js"></script>
    -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js"></script>

    <!-- DataFormsJS App object and the <json-data> control (required for this demo) -->
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/DataFormsJS.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/controls/json-data.min.js"></script>

    <!-- Optional scripts used for additional features in this demo -->
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/vue-directives.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/filter.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/sort.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/clickToHighlight.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/exportToCsv.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/exportToExcel.min.js"></script>
</body>
</html>