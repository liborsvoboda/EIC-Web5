<!doctype html>
<html
    lang="en"
    data-show-errors
    data-i18n-default="en"
    data-i18n-locales="en,ja,es,pt-BR,ar,fr,zh-CN"
    data-i18n-file="countries">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title data-i18n="Countries Demo | Handlebars"></title>
        <link rel="stylesheet" href="css/countries.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui-flag@2.4.0/flag.min.css">
        <link rel="canonical" href="https://www.dataformsjs.com/examples/places-demo-hbs.htm">
    </head>
    <body>
        <div id="view" dir="auto"></div>

        <!--
            Templates/Views can be both included on the page or downloaded.
            In this example the main page and several "HTML Controls" are
            embedded in the page while other Templates are downloaded only
            if needed.
        -->

        <script type="text/x-template" data-engine="handlebars" id="loading-screen">
            <h3>{{i18n 'Loading...'}}</h3>
        </script>

        <script type="text/x-template" data-engine="handlebars" id="error-screen">
            <h3 class="error">{{i18n 'Error'}} - {{errorMessage}}</h3>
        </script>

        <!--
            Data screens use the 'Loading...' with translations while the lazy load script
            downloads will use a spinner. Typically an app would have only one shared loading
            screen but this is a demo page and designed to show different options.

            This screen is linked from [app.settings.lazyTemplateSelector] later in this file.
            Loading screens that use [lazyTemplateSelector] can only be simple <template> tags.
        -->
        <template id="loading-spinner-screen">
            <div class="loading">
                <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            </div>
        </template>

        <script
            type="text/x-template"
            data-engine="handlebars"
            data-default-route
            data-route="/:lang/"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/countries"
            data-load-only-once>

            {{#if isLoading}}<div data-template-id="loading-screen"></div>{{/if}}
            {{#if hasError}}<div data-template-id="error-screen"></div>{{/if}}
            {{#if isLoaded}}
                <h1>{{i18n 'Countries'}}</h1>

                <nav>
                    <a href="#/{{i18n_Locale}}/search">{{i18n 'Search'}}</a>
                    <a href="#/{{i18n_Locale}}/info">{{i18n 'Info'}}</a>
                    <div class="ml-20" data-template-id="download-links" data-file-name="Countries"></div>
                </nav>

                <input
                    data-filter-selector="table"
                    data-filter-results-text-selector="h1"
                    data-filter-results-text-all="{{i18n '{totalCount} Countries'}}"
                    data-filter-results-text-filtered="{{i18n 'Showing {displayCount} of {totalCount} Countries'}}"
                    placeholder="{{i18n 'Enter filter, example \'North America\''}}">

                <table data-sort data-sort-class-odd="row-odd" data-sort-class-even="row-even" class="click-to-highlight">
                    <thead>
                        <tr>
                            <th>{{i18n 'Code'}}</th>
                            <th>{{i18n 'Name'}}</th>
                            <th>{{i18n 'Size (KM)'}}</th>
                            <th>{{i18n 'Population'}}</th>
                            <th>{{i18n 'Continent'}}</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each countries}}
                        <tr>
                            <td>
                                <i class="{{lowerCase iso}} flag"></i>
                                <a href="#/{{../i18n_Locale}}/regions/{{iso}}">{{iso}}</a>
                            </td>
                            <td>{{country}}</td>
                            <td class="align-right" data-value="{{area_km}}">{{formatNumber area_km}}</td>
                            <td class="align-right" data-value="{{population}}">{{formatNumber population}}</td>
                            <td>{{continent}}</td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            {{/if}}
        </script>

        <!--
            This HTML Control (similar concept to a React or Vue Component) takes a
            [fileName] property (defined from HTML attribute [data-file-name]) and
            renders the HTML. Plugins [i18n, exportToExcel, exportToCsv] are used with-in
            this HTML control for export functionality using the users selected language.

            This control ends up being included when [data-template-id="download-links"]
            is used on the page's HTML.
        -->
        <script type="text/x-template" data-engine="handlebars" id="download-links">
            <span class="download">{{i18n 'Download'}}</span>
            <img class="download"
                src="img/Excel.svg"
                height="16"
                width="16"
                alt="{{i18n 'Download to Excel'}}"
                title="{{i18n 'Download to Excel'}}"
                data-export-excel-selector="table"
                data-export-file-name="{{i18n fileName}}.xlsx">
            <img class="download"
                src="img/CSV.svg"
                height="16"
                width="16"
                alt="{{i18n 'Download to CSV'}}"
                title="{{i18n 'Download to CSV'}}"
                data-export-csv-selector="table"
                data-export-file-name="{{i18n fileName}}.csv">
        </script>

        <script
            type="text/x-template"
            data-engine="handlebars"
            data-route="/:lang/regions/:country"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/regions/:country"
            data-load-only-once
            src="html/regions-hbs.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="handlebars"
            data-route="/:lang/cities/:country/:region"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/cities/:country/:region"
            data-load-only-once
            src="html/cities-hbs.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="handlebars"
            data-route="/:lang/city/:id"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/place/:id"
            data-load-only-once
            data-lazy-load="leafletCss, leafletJs, leafletPlugin"
            src="html/place-hbs.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="handlebars"
            data-route="/:lang/search"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/countries?order_by=country"
            data-load-only-once
            data-lazy-load="json_data, keydownAction, chosen, chosenPlugin"
            src="html/search-places-hbs.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="handlebars"
            data-route="/:lang/info"
            data-src="html/places-info-hbs.htm">
        </script>

        <!-- Handlebars -->
        <script src="https://cdn.jsdelivr.net/npm/handlebars@4.7.6/dist/handlebars.min.js"></script>

        <!-- DataFormsJS -->
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/DataFormsJS.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/pages/jsonData.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/handlebars-helpers.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/format.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/i18n.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/filter.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/sort.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/clickToHighlight.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/exportToCsv.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/exportToExcel.min.js"></script>
        <script>
            // Lazy Load the following scripts only if needed based on attribute [data-lazy-load].
            // When scripts need to be downloaded in a specific order then use an array otherwise
            // one script per key is recommended. When a controller uses multiple lazy load items
            // they are downloaded asynchronous however items in the array are download only after
            // the previous item is loaded.
            app.lazyLoad = {
                chosen: [
                    // [jquery] must be included before [chosen] and [countries-chosen.css]
                    // must be loaded after [chosen.css].
                    'https://code.jquery.com/jquery-3.4.1.min.js',
                    'https://cdn.jsdelivr.net/npm/chosen-js@1.8.7/chosen.css',
                    'https://cdn.jsdelivr.net/npm/chosen-js@1.8.7/chosen.jquery.min.js',
                    'css/countries-chosen.css',
                ],
                chosenPlugin: [
                    // For this demo the [dataBind] plugin is loaded before [chosen]
                    // to make sure that the <select> value will be set before the chose
                    // control is created. Otherwise the following jQuery code would have
                    // to be called to trigger the update.
                    //     $('.chosen-select').trigger('chosen:updated');
                    //
                    'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/dataBind.min.js',
                    'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/chosen.min.js',
                ],
                keydownAction: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/keydownAction.min.js',
                json_data: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/controls/json-data.js',
                leafletCss: 'https://cdn.jsdelivr.net/npm/leaflet@1.5.1/dist/leaflet.css',
                leafletJs: 'https://cdn.jsdelivr.net/npm/leaflet@1.5.1/dist/leaflet.js',
                leafletPlugin: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/leaflet.min.js',
            };
            app.settings.lazyTemplateSelector = '#loading-spinner-screen';
        </script>
    </body>
</html>