import{render,showError,escapeHtml}from"./utils.min.js";import{Format}from"./utils-format.min.js";const shadowTmpl=document.createElement("template");shadowTmpl.innerHTML="\n    <style>\n        :host { display: block; }\n        :host([hidden]) { display: none; }\n    </style>\n    <slot></slot>\n";class DataList extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"}).appendChild(shadowTmpl.content.cloneNode(!0)),this.state={list:null}}get value(){return this.state.list}set value(e){this.state.list=e,this.renderList()}get errorClass(){return this.getAttribute("error-class")}get defaultErrorStyle(){return"color:white; background-color:red; padding:0.5rem 1rem; margin:.5rem;"}renderList(){const e=this.state.list;if(null===e||""===e)return void(this.innerHTML="");if(Array.isArray(e)&&0===e.length)return void(this.innerHTML="");if(!Array.isArray(e))return void showError(this,"Invalid list data type for [data-list]");let t=this.getAttribute("root-class"),r=this.getAttribute("root-attr"),s="";if(t&&(s=render` class="${t}"`),r){r=r.split(",").map((e=>e.trim()));for(const e of r){const t=e.indexOf("=");if(t>1){const r=e.substring(0,t).trim(),n=e.substring(t+1).trim();s+=render` ${r}="${n}"`}else s+=render` ${e}`}}const n=[],o=this.getAttribute("template-selector");if(null!==o){const t=document.querySelector(o);if(null===t)return void showError(this,"Missing template from selector: "+o);if("TEMPLATE"!==t.nodeName&&("SCRIPT"!==t.nodeName||"text/x-template"!==t.type))return void showError(this,"Element at selector ["+o+'] needs to point to a <template> or a <script type="text/x-template"> element');const r=this.getAttribute("root-element");if(null!==r){if(r!==r.toLowerCase())return void showError(this,'<data-list [root-element="name"]> must be all lower-case. Value used: ['+r+"]");if(-1!==r.indexOf(" "))return void showError(this,'<data-list [root-element="name"]> cannot contain a space. Value used: ['+r+"]");if(!1!==/[&<>"'/]/.test(r))return void showError(this,'<data-list [root-element="name"]> cannot contain HTML characters that need to be escaped. Invalid characters are [& < > " \' /]. Value used: ['+r+"]");n.push(`<${r}${s}>`)}try{let s=t.innerHTML;const o=null===this.getAttribute("template-returns-html")?"render":"";o||"TEMPLATE"!==t.nodeName||(s=s.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<"));const i=this.getAttribute("list-item-name");let l;l=i?new Function(i,"index","render","escapeHtml","format","return "+o+"`"+s+"`"):new Function("item","index","render","escapeHtml","format","with(item){return "+o+"`"+s+"`}");let a=0;const d=new Format;for(const t of e){try{n.push(l(t,a,render,escapeHtml,d))}catch(e){const t="ul"===r?"li":"div";this.errorClass?n.push(render`<${t} class="${this.errorClass}">Item Error - ${e.message}</${t}>`):n.push(render`<${t} style="${this.defaultErrorStyle}">Item Error - ${e.message}</${t}>`)}a++}}catch(e){this.errorClass?n.push(render`<div class="${this.errorClass}">Error Rendering Template - ${e.message}</div>`):n.push(render`<div style="${this.defaultErrorStyle}">Error Rendering Template - ${e.message}</div>`)}null!==r&&n.push(render`</${r}>`)}else{n.push(`<ul${s}>`);for(const t of e)n.push(render`<li>${t}</li>`);n.push("</ul>")}this.innerHTML=n.join("")}}window.customElements.define("data-list",DataList);