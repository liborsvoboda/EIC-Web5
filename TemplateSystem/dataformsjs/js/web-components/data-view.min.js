import{render,showError,escapeHtml}from"./utils.min.js";import{Format}from"./utils-format.min.js";const shadowTmpl=document.createElement("template");shadowTmpl.innerHTML="\n    <style>\n        :host { display: block; }\n        :host([hidden]) { display: none; }\n    </style>\n    <slot></slot>\n";class DataView extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"}).appendChild(shadowTmpl.content.cloneNode(!0)),this.state=null}get value(){return this.state}set value(t){this.state=t,this.renderView()}renderView(){if(null===this.state)return void(this.innerHTML="");if("object"!=typeof this.state)return void showError(this,"Invalid data type for <data-view>, expected object or array but was passed: "+typeof this.state);const t=this.getAttribute("template-selector");if(null===t)return void showError(this,"Missing Attribute [template-selector] for <data-view>.");const e=document.querySelector(t);if(null===e)return void showError(this,"Missing template from selector: "+t);if("TEMPLATE"!==e.nodeName&&("SCRIPT"!==e.nodeName||"text/x-template"!==e.type))return void showError(this,"Element at selector ["+t+'] needs to point to a <template> or a <script type="text/x-template"> element');let r=e.innerHTML;const s=null===this.getAttribute("template-returns-html")?"render":"";s||"TEMPLATE"!==e.nodeName||(r=r.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<"));const n=this.getAttribute("data-name");let o;try{o=n?new Function(n,"render","escapeHtml","format","return "+s+"`"+r+"`"):new Function("item","render","escapeHtml","format","with(item){return "+s+"`"+r+"`}")}catch(t){return void showError(this,`Error Rendering Template - ${t.message}`)}try{const t=new Format;this.innerHTML=o(this.state,render,escapeHtml,t)}catch(t){showError(this,`Error Evaluating Template - ${t.message}`)}}}window.customElements.define("data-view",DataView);