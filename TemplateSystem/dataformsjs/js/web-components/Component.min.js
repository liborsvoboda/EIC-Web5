export{escapeHtml,render as html}from"./utils.min.js";export class Component extends HTMLElement{constructor(){super();const t=this.attachShadow({mode:"open"}),e=void 0===this.constructor.css?"":this.constructor.css,s=document.createElement("template");s.innerHTML=`\n            <style>\n                :host { display: block; }\n                :host([hidden]) { display: none; }\n                ${e}\n            </style>\n            <slot></slot>\n        `,t.appendChild(s.content.cloneNode(!0)),this.state={},this._wasLoaded=!1}connectedCallback(){if(!this._wasLoaded){const t=this.constructor.props;if("object"==typeof t)for(const e in t)t.hasOwnProperty(e)&&(void 0===this.state[e]&&(this.state[e]=t[e]),this.hasOwnProperty(e)||Object.defineProperty(this,e,{get:function(){return this.state[e]},set:function(t){this.state[e]!==t&&(this.state[e]=t,this.update())}}));this._wasLoaded=!0}this.update()}static get observedAttributes(){if(void 0===this.props)return[];const t=[];for(const e of Object.keys(this.props)){t.push(e);const s=e.replace(/[A-Z]/g,(t=>"-"+t.toLowerCase()));e!==s&&t.push(s)}return t}attributeChangedCallback(t,e,s){function n(t){switch(t){case"true":case"":return!0;case"false":return!1;case"null":return null;default:return t}}const o=this.constructor.props;if(o&&void 0!==o[t]&&e!==s)this.state[t]=n(s),this.update();else if(t.includes("-")){const r=t.replace(/-([a-z])/g,(t=>t[1].toUpperCase()));o&&void 0!==o[r]&&e!==s&&(this.state[r]=n(s),this.update())}}update(){this.innerHTML=void 0===this.render?"":this.render(),this.onRendered&&this.onRendered()}}