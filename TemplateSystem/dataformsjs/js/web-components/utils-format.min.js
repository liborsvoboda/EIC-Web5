export class Format{number(r){return this.formatNumber(r,{})}round(r,e=0){const t={style:"decimal",maximumFractionDigits:e,minimumFractionDigits:e};return this.formatNumber(r,t)}currency(r,e){const t={style:"currency",currency:e,maximumFractionDigits:2};return this.formatNumber(r,t)}percent(r,e=0){const t={style:"percent",maximumFractionDigits:e,minimumFractionDigits:e};return this.formatNumber(r,t)}date(r){return this.formatDateTime(r,{})}dateTime(r){return this.formatDateTime(r,{year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"})}time(r){return this.formatDateTime(r,{hour:"numeric",minute:"numeric",second:"numeric"})}isNumber(r){return!isNaN(parseFloat(r))&&isFinite(r)}formatDateTime(r,e){if(void 0===window.Intl)return r;if(null===r||""===r)return null;try{if(r instanceof Date)return new Intl.DateTimeFormat(navigator.language,e).format(r);if(/^\d{4}-\d{2}-\d{2}$/.test(r)){const t=r.split("-").map((function(r){return parseInt(r,10)})),n=new Date(t[0],t[1]-1,t[2]);return new Intl.DateTimeFormat(navigator.language,e).format(n)}{const t=new Date(r),n=Intl.DateTimeFormat(navigator.language,e).format(t);return"en-US"===navigator.language?n.toLocaleString().replace(", "," "):n.toLocaleString()}}catch(t){return console.warn("Error formatting Date/Time Value:"),console.log(navigator.language),console.log(e),console.log(r),console.log(t),"Error"}}formatNumber(r,e){if(null===r||""===r)return null;if(!this.isNumber(r))return console.warn("Warning value specified in DateFormsJS function formatNumber() is not a number:"),console.log(r),r;if(void 0===window.Intl)return r;try{return new Intl.NumberFormat(navigator.language,e).format(r)}catch(t){return console.warn("Error formatting Numeric Value:"),console.log(navigator.language),console.log(e),console.log(r),console.log(t),"Error"}}}