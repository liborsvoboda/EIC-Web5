!function(){"use strict";var h={sortCompare:function(e,t){return null===e.type&&null!==t.type?-1:null===t.type&&null!==e.type?1:null===e.type&&null===t.type?0:"number"===e.type&&"number"!==t.type?-1:"number"===t.type&&"number"!==e.type?1:"number"===e.type&&"number"===t.type?e.value-t.value:"date"===e.type&&"date"!==t.type?-1:"date"===t.type&&"date"!==e.type?1:"date"===e.type&&"date"===t.type?e.value<t.value?-1:e.value>t.value?1:0:"string"===e.type&&"string"===t.type?void 0!==e.value.localeCompare?e.value.localeCompare(t.value):e.value<t.value?-1:e.value>t.value?1:0:(console.warn("A code change from [sort.js] impacted sorting and caused an expected error so the data may appear out of order. Please review your code changes"),0)},sortColumn:function(e){var e=e.target,t=e&&e.parentElement&&e.parentElement.parentElement?e.parentElement.parentElement.parentElement:null;if("TH"!==e.tagName&&"TD"!==e.tagName)return console.warn("sort.sortColumn() was called with an invalid element. If called manually the cell needs to be passed."),void console.log(e);if(null!=t&&"TABLE"!==t.tagName)return console.warn("sort.sortColumn() was called with an invalid element. If called manually the table cell of the last row from the table header should be used."),void console.log(e);for(var c=t.getAttribute("data-sort-column"),a=e.cellIndex,e="asc",i=(null!==c&&parseInt(c,10)===a&&(e="asc"===t.getAttribute("data-sort-order")?"desc":"asc"),t.tBodies[0]),l=i.rows,o=[],n=0,p=l.length;n<p;n++){var r,s,u=l[n].cells[a];void 0!==u&&(u=typeof(r=(null!==(r=u.getAttribute("data-value"))?r:u.textContent).trim()),""===r?r=null:isNaN(r)?(s=new Date(r),isNaN(s.getTime())?r=void 0!==r.toLocaleLowerCase?r.toLocaleLowerCase():r.toLowerCase():(r=s,u="date")):r=parseFloat(r),o.push({row:l[n],value:r,type:null===r?null:u}))}o.sort(h.sortCompare),"desc"===e&&o.reverse();for(var m=t.getAttribute("data-sort-class-odd"),v=t.getAttribute("data-sort-class-even"),y=m&&v,b=0,g=0,f=o.length;g<f;g++){var d=o[g].row;y&&"none"!==d.style.display&&(++b%2==0?(d.classList.add(v),d.classList.remove(m)):(d.classList.add(m),d.classList.remove(v))),i.appendChild(d)}t.setAttribute("data-sort-column",a),t.setAttribute("data-sort-order",e)},setupTables:function(e){e=(e||document).querySelectorAll("table[data-sort]:not([data-sort-setup])");Array.prototype.forEach.call(e,function(e){if(null!==e.tHead){if(0===e.tHead.rows.length)return console.warn("Unable to setup sorting for table because the <thead> element contained now rows"),void console.log(e);if(0===e.tBodies.length)return console.warn("Unable to setup sorting for table because the <tbody> element is missing"),void console.log(e);if(1!==e.tBodies.length)return console.warn("Unable to setup sorting for table because there can only be one <tbody> element for the table"),void console.log(e);for(var t=e.tHead.rows[e.tHead.rows.length-1],a=0,l=t.cells.length;a<l;a++)t.cells[a].addEventListener("click",h.sortColumn),t.cells[a].style.cursor="pointer";e.setAttribute("data-sort-setup","")}})},onRendered:function(e){this.setupTables(e)}};app.addPlugin("sort",h)}();