{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { onMount } from \"svelte\";\nimport Aioli from \"@biowasm/aioli\";\nimport Parameter from \"./Parameter.svelte\";\n\n// Bootstrap\nimport popper from \"popper.js\";\nimport jQuery from \"jquery\";\nimport Bootstrap from \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\n// -----------------------------------------------------------------------------\n// Globals\n// -----------------------------------------------------------------------------\n\nlet CLI;\n\n// Status\nlet busy = true;\nlet progress = {\n\tstep: 0,\t\t\t// tSNE iteration we have data for\n\terror: null,\t\t// tSNE error for iteration `progress.step`\n\tplotted: 0,\t\t\t// tSNE iteration being plotted; progress.plotted always < progress.step\n};\n\n// Labels\nlet clusterIDs = [];\nlet clusterNames = [];\nlet clusterIDsUnique = [];\n\n// Plots\nlet dataPlots = [];\t\t\t\t\t// Array of all plots, keyed on iteration number\nlet dataErrorPlots = [];\t\t// Array of all error plots, keyed on iteration number\n\n// WebWorker data \nlet data = null;\t\t\t\t\t// Latest data received from WebWorker (a single trace)\nlet dataErrors = { x: [], y: [] };\t// Latest historical errors\n\n// Config\nlet options = {\n\tstep: 0.5,\n\tperplexity: 50,\n\tseed: 42,\n\titerations: 300,\n\tfrequency: 1,\n\tminError: 0.001,\n\tshowError: true\n};\nconst axisOptions = {\n\tshowticklabels: false,\n\tshowgrid: true,\n\tshowline: false,\n\tzeroline: false\n};\nconst plotOptions = {\n\tmargin: { t: 0, b: 0, l: 0, r: 0 },\n\thovermode: \"closest\",\n\tshowlegend: true,\n\txaxis: { ...axisOptions, range: [-1.05, 1.05]},\n\tyaxis: { ...axisOptions, range: [-1.05, 1.05]},\n\txaxis2: { ...axisOptions, showgrid: false, domain: [0.75, 1], anchor: \"x2\" },\n\tyaxis2: { ...axisOptions, showgrid: false, domain: [0, 0.25], anchor: \"y2\" },\n\t// Background for inset plot\n\tshapes: [{\n\t\ttype: \"rect\", xref: \"x\", yref: \"y\",\n\t\tx0: 0.5, x1: 1.05,\n\t\ty0: -0.5, y1: -1.05,\n\t\tfillcolor: \"#000000\", opacity: 0.05, line: { width: 0 }\n\t}]\n};\n\n\n// -----------------------------------------------------------------------------\n// Reactive statements\n// -----------------------------------------------------------------------------\n\n$: process(data);\n\n\n// -----------------------------------------------------------------------------\n// On page load\n// -----------------------------------------------------------------------------\n\nonMount(async () => {\n\t// Initialize tSNE WebAssembly module\n\tCLI = await new Aioli(\"bhtsne/2016.08.22\", {\n\t\tcallback: d => {\n\t\t\tdata = d;\n\t\t}\n\t});\n\tbusy = false;\n\tconsole.log(\"Loaded\");\n\n\t// Enable jQuery tooltips\n\tjQuery(\"[data-toggle='popover']\").popover();\n});\n\n\n// -----------------------------------------------------------------------------\n// Launch tSNE\n// -----------------------------------------------------------------------------\n\nasync function run()\n{\n\t// Reset\n\tbusy = true;\n\tdataErrors = { x: [], y: [] };\n\tprogress.plotted = 0;\n\n\t// Launch tSNE analysis and provide callback function that saves intermediate results\n\tlet params = `-e ${options.step} -r ${options.frequency} -p ${options.perplexity} -n ${options.iterations} -s ${options.seed}`;\n\tawait CLI.exec(`bhtsne -d 2 ${params} /bhtsne/pollen2014.snd`);\n}\n\n\n// -----------------------------------------------------------------------------\n// Process data we receive from WebWorker\n// -----------------------------------------------------------------------------\n\nfunction process(data)\n{\n\tif(data == null)\n\t\treturn;\n\n\t// If got row names from WebWorker\n\tif(data.row_names != null) {\n\t\tclusterIDs = data.row_names.map(d => d.split(\":\")[0]);\n\t\tclusterNames = data.row_names.map(d => d.split(\":\")[1]);\n\t\tclusterIDsUnique = [...new Set(clusterIDs)];\n\t\treturn;\n\t}\n\n\t// Otherwise, we received a data update\n\t// Do we want to replot the data? i.e. has the error changed enough?\n\tlet skip = false;\n\tif(Math.abs(data.error - progress.error)/progress.error < options.minError)\n\t\tskip = true;\n\n\t// Update progress\n\tprogress.error = data.error;\n\tprogress.step = data.iter;\n\tprogress.n = data.N;\n\t// Update error values\n\tdataErrors.x.push(data.iter);\n\tdataErrors.y.push(data.error);\n\n\t// Start plotting if we have enough data\n\tif(progress.plotted == 0 && progress.step > Math.min(50, Math.round(options.iterations / 2)))\n\t\tplot();\n\n\tif(skip)\n\t\treturn;\n\n\tconsole.log(`Step ${data.iter} - error = ${data.error}`);\n\n\t// Extract X and Y coordinates (stores as [x1, y1, x2, y2, ...]).\n\t// Also convert the x/y coordinates from a typed array to a regular array.\n\tlet traces = [];\n\tlet x = data.data.filter((d, k) => { return k % 2 == 0 }),\n\t\ty = data.data.filter((d, k) => { return k % 2 == 1 });\n\n\t// Generate traces\n\tfor(let clusterID of clusterIDsUnique)\n\t{\n\t\tlet rowIDs = clusterIDs\n\t\t\t.map((v, k) => v == clusterID ? k : null )\n\t\t\t.filter(d => d != null);\n\n\t\ttraces.push({\n\t\t\tname: clusterNames[rowIDs[0]],\n\t\t\tx: x.filter((v, k) => rowIDs.includes(k)),\n\t\t\ty: y.filter((v, k) => rowIDs.includes(k)),\n\t\t\t// Displays line graph by default\n\t\t\tmode: \"markers\",\n\t\t\ttype: \"scattergl\",\n\t\t\t// Don't show coordinates since they don't mean anything\n\t\t\thoverinfo: \"name\",\n\t\t\t// Avoid having an ellipsis in the hover text\n\t\t\thoverlabel: { namelength: -1 },\n\t\t});\n\t}\n\n\t// Add error trace as inlet\n\tlet errorTraces = [];\n\tif(options.showError)\n\t{\n\t\terrorTraces.push({\n\t\t\tx: [...dataErrors.x],\n\t\t\ty: [...dataErrors.y],\n\t\t\tname: \"Error\", xaxis: \"x2\", yaxis: \"y2\"\n\t\t});\n\t}\n\n\tdataPlots[progress.step] = traces;\n\tdataErrorPlots[progress.step] = errorTraces;\n}\n\n\n// -----------------------------------------------------------------------------\n// Plot tSNE iterations. To make the plotting smooth, we don't plot data as we\n// receive it. Although that seems to work in Firefox and Safari, it appears\n// very choppy in Chrome. Separating the data analysis from visualization seems\n// to address that issue and ensures smooth plotting in all browsers.\n// -----------------------------------------------------------------------------\n\nfunction plotNext(timeout=30)\n{\n\tif(timeout == 0)\n\t\tplot();\n\telse\n\t\tsetTimeout(plot, timeout);\n}\n\nfunction plot()\n{\n\tconsole.log(`plotted=${progress.plotted}; total=${dataPlots.length}`);\n\n\t// Stop when we've plotted the last tSNE iteration\n\tif(progress.plotted >= options.iterations) {\n\t\tbusy = false;\n\t\treturn;\n\t}\n\n\t// Stay a few steps behind so the calculation can catch up to the plotting\n\tif(progress.plotted > (dataPlots.length - 10) && dataPlots.length < (options.iterations - 10)) {\n\t\tplotNext();\n\t\treturn;\n\t}\n\n\t// If we don't have data on the next iteration (i.e. % error changed not large enough),\n\t// keep going without timeout (plot stays as is)\n\tprogress.plotted++;\n\tif(dataPlots[progress.plotted] == null) {\n\t\tplotNext(0);\n\t\treturn;\n\t}\n\n\t// Normalize points such that the median is at (0, 0) with range up to -1 to 1.\n\t// This makes the visualization more stable instead of the central cluster flailing around.\n\tfunction normalizeToCenter(points) {\n\t\tlet xValues = points.map(d => Array.from(d.x)).flat();\n\t\tlet yValues = points.map(d => Array.from(d.y)).flat();\n\t\tlet xCenter = median(xValues);\n\t\tlet yCenter = median(yValues);\n\t\tlet xMaxDistanceFromCenter = Math.max(...xValues.map(x => Math.abs(x - xCenter)));\n\t\tlet yMaxDistanceFromCenter = Math.max(...yValues.map(y => Math.abs(y - yCenter)));\n\t\tlet normalizedPoints = points.map(group => ({\n\t\t\t\t...group,\n\t\t\t\tx: group.x.map(val => (val - xCenter) / xMaxDistanceFromCenter),\n\t\t\t\ty: group.y.map(val => (val - yCenter) / yMaxDistanceFromCenter)\n\t\t}));\n\t\treturn normalizedPoints;\n\t}\n\n\t// Plot tSNE iteration. Note that Plotly.react doesn't re-initialize the plot each time it's called\n\tPlotly.react(\n\t\tdocument.getElementById(\"scatter\"),\n\t\t[...normalizeToCenter(dataPlots[progress.plotted]), ...dataErrorPlots[progress.plotted]],\n\t\tplotOptions,\n\t\t{ displayModeBar: false }\n\t);\n\n\t// Plot next iteration after slight delay\n\tplotNext();\n}\n\n// -----------------------------------------------------------------------------\n// Utilities\n// -----------------------------------------------------------------------------\nfunction median(values) {\n\tlet sorted = values.sort((a, b) => a - b);\n\tlet mid = Math.floor(sorted.length / 2);\n\treturn values.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n};\n\n// -----------------------------------------------------------------------------\n// HTML\n// -----------------------------------------------------------------------------\n</script>\n\n<svelte:head>\n\t<script src=\"https://cdn.plot.ly/plotly-1.54.0.min.js\" type=\"text/javascript\"></script>\n</svelte:head>\n\n<style>\n#scatter {\n\twidth: 350px;\n\theight: 300px;\n}\n\n@media (min-width: 700px) {\n\t#scatter {\n\t\twidth: 600px;\n\t\theight: 500px;\n\t}\n}\n</style>\n\n<nav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n\t<div class=\"container\">\n\t<a class=\"navbar-brand\" href=\"/\">tSNE Sandbox</a>\n\t<button class=\"navbar-toggler collapsed\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-controls=\"navbar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t<span class=\"navbar-toggler-icon\"></span>\n\t</button>\n\n\t<div id=\"navbar\" class=\"collapse navbar-collapse\">\n\t\t<ul class=\"navbar-nav mr-auto\"></ul>\n\t\t<ul class=\"navbar-nav\">\n\t\t\t<li class=\"nav-item dropdown\">\n\t\t\t\t<button class=\"btn btn-link nav-link dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Data</button>\n\t\t\t\t<div class=\"dropdown-menu dropdown-menu-right\">\n\t\t\t\t\t<a target=\"_blank\" class=\"dropdown-item\" href=\"https://hemberg-lab.github.io/scRNA.seq.datasets/human/tissues/#pollen\">Data Source</a>\n\t\t\t\t\t<a target=\"_blank\" class=\"dropdown-item\" href=\"https://www.nature.com/articles/nbt.2967\">Paper describing data</a>\n\t\t\t\t</div>\n\t\t\t</li>\n\n\t\t\t<li class=\"nav-item dropdown\">\n\t\t\t\t<button class=\"btn btn-link nav-link dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Resources</button>\n\t\t\t\t<div class=\"dropdown-menu dropdown-menu-right\">\n\t\t\t\t\t<a target=\"_blank\" class=\"dropdown-item\" href=\"https://distill.pub/2016/misread-tsne/\">How to Use tSNE Effectively</a>\n\t\t\t\t\t<a target=\"_blank\" class=\"dropdown-item\" href=\"https://www.oreilly.com/learning/an-illustrated-introduction-to-the-t-sne-algorithm\">An illustrated introduction to tSNE</a>\n\t\t\t\t\t<a target=\"_blank\" class=\"dropdown-item\" href=\"https://lvdmaaten.github.io/tsne/\">Frequently Asked Questions about tSNE</a>\n\t\t\t\t\t<a target=\"_blank\" class=\"dropdown-item\" href=\"https://lvdmaaten.github.io/publications/papers/JMLR_2008.pdf\">Original tSNE paper</a>\n\t\t\t\t\t<a target=\"_blank\" class=\"dropdown-item\" href=\"https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding\">tSNE Wiki page</a>\n\t\t\t\t</div>\n\t\t\t</li>\n\n\t\t\t<li class=\"nav-item active\">\n\t\t\t\t<a class=\"nav-link\" href=\"https://github.com/robertaboukhalil/tsne-sandbox\">Code</a>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\t</div>\n</nav>\n\n<main>\n\t<div class=\"jumbotron mt-5 mt-md-2 pb-1\">\n\t\t<div class=\"container\">\n\t\t\t<p class=\"lead\">tSNE is an algorithm for visualizing high-dimensional data.</p>\n\t\t\t<p>\n\t\t\t\tIn this example, our dataset consists of <code>302</code> points that live in <code>122</code> dimensions!\n\t\t\t\tSince humans aren't that good at seeing in <code>122</code> dimensions, we use tSNE to reduce the data to 2 dimensions and plot it below.\n\t\t\t\ttSNE tries to make the 2D representation preserve the relative distance between points.\n\t\t\t</p>\n\t\t</div>\n\t</div>\n\n\t<div class=\"container\">\n\t\t<div class=\"row\">\n\t\t\t<!-- Params -->\n\t\t\t<div class=\"col-12 col-md-3\">\n\t\t\t\t<h4 class=\"mb-4\">Parameters</h4>\n\t\t\t\t<Parameter label=\"Step Size\" type=\"text\" on:launch={run} bind:value={options.step} disabled={busy} help=\"Parameter between <code>0</code> and <code>1</code> that determines the approximation level used by tSNE; lower numbers mean less approximations, therefore higher runtime.\" />\n\t\t\t\t<Parameter label=\"Perplexity\" type=\"text\" on:launch={run} bind:value={options.perplexity} disabled={busy} help=\"Parameter between <code>5</code> and <code>50</code> that is an estimate of how many neighbor each data point has.\" />\n\t\t\t\t<Parameter label=\"Iterations\" type=\"text\" on:launch={run} bind:value={options.iterations} disabled={busy} help=\"Stop algorithm after <code>{options.iterations}</code> iterations.\" />\n\t\t\t\t<Parameter label=\"Rnd Seed\" type=\"text\" on:launch={run} bind:value={options.seed} disabled={busy} help=\"Seed for random number generator for reproducibility. Set to -1 to disable.\" />\n\t\t\t\t<Parameter label=\"Frequency\" type=\"text\" on:launch={run} bind:value={options.frequency} disabled={busy} help=\"How often you'd like the plot to be updated. The lower the number, the more work your browser has to do.\" />\n\t\t\t\t<Parameter label=\"Min Error\" type=\"text\" on:launch={run} bind:value={options.minError} disabled={busy} help=\"Minimum error change for plotting.\" />\n\t\t\t\t<Parameter label=\"Plot Error\" type=\"checkbox\" bind:value={options.showError} disabled={busy} help=\"Enable this setting to visualize how the error changes over time.\" />\n\t\t\t\t<hr />\n\n\t\t\t\t<button type=\"button\" class=\"btn btn-primary btn-lg\" on:click={run} disabled={busy}>\n\t\t\t\t\tLaunch tSNE\n\t\t\t\t\t{#if busy}\n\t\t\t\t\t\t<span class=\"spinner-grow spinner-grow-sm mb-1\" role=\"status\" aria-hidden=\"true\"></span>\n\t\t\t\t\t{/if}\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<!-- Data Viz -->\n\t\t\t<div class=\"col-12 col-md-9 mt-4 mt-md-0\">\n\t\t\t\t<h4 class=\"mb-4\">\n\t\t\t\t\ttSNE Plot\n\t\t\t\t\t{#if progress.plotted > 0}\n\t\t\t\t\t<small><small>\n\t\t\t\t\t\tStep {progress.plotted} / {options.iterations}\n\t\t\t\t\t\t&mdash; error = {Math.round(10000 * dataErrors.y[progress.plotted - 2]) / 10000}\n\t\t\t\t\t</small></small>\n\t\t\t\t\t{/if}\n\t\t\t\t</h4>\n\n\t\t\t\t{#if busy && progress.plotted == 0}\n\t\t\t\t\t<div class=\"d-flex justify-content-center\">\n\t\t\t\t\t\t<div class=\"text-primary spinner-border mt-0\" role=\"status\">\n\t\t\t\t\t\t\t<span class=\"sr-only\">Loading...</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p class=\"lead ml-2\">\n\t\t\t\t\t\t\t{#if progress.step > 0}\n\t\t\t\t\t\t\t\tInitializing tSNE...\n\t\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t\tLoading...\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t\t<div id=\"scatter\"></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</main>\n"
  ],
  "names": [],
  "mappings": "AA8RA,uBAAS,CACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KACT,CAEA,MAAO,YAAY,KAAK,CAAE,CACzB,uBAAS,CACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KACT,CACD"
}