"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.source = void 0;
const source = exports.source = "\"use strict\";\n\n// packages/playwright-ct-core/src/injected/importRegistry.ts\nfunction isImportRef(value) {\n  return typeof value === \"object\" && value && value.__pw_type === \"importRef\";\n}\nvar ImportRegistry = class {\n  constructor() {\n    this._registry = /* @__PURE__ */ new Map();\n  }\n  initialize(components) {\n    for (const [name, value] of Object.entries(components))\n      this._registry.set(name, value);\n  }\n  async resolveImportRef(importRef) {\n    const importFunction = this._registry.get(importRef.id);\n    if (!importFunction)\n      throw new Error(`Unregistered component: ${importRef.id}. Following components are registered: ${[...this._registry.keys()]}`);\n    let importedObject = await importFunction();\n    if (!importedObject)\n      throw new Error(`Could not resolve component: ${importRef.id}.`);\n    if (importRef.property) {\n      importedObject = importedObject[importRef.property];\n      if (!importedObject)\n        throw new Error(`Could not instantiate component: ${importRef.id}.${importRef.property}.`);\n    }\n    return importedObject;\n  }\n};\n\n// packages/playwright-ct-core/src/injected/serializers.ts\nfunction isFunctionRef(value) {\n  return value && typeof value === \"object\" && value.__pw_type === \"function\";\n}\nasync function unwrapObject(value) {\n  return transformObjectAsync(value, async (v) => {\n    if (isFunctionRef(v)) {\n      const result = (...args) => {\n        window.__ctDispatchFunction(v.ordinal, args);\n      };\n      return { result };\n    }\n    if (isImportRef(v))\n      return { result: await window.__pwRegistry.resolveImportRef(v) };\n  });\n}\nfunction transformObject(value, mapping) {\n  const result = mapping(value);\n  if (result)\n    return result.result;\n  if (value === null || typeof value !== \"object\")\n    return value;\n  if (value instanceof Date || value instanceof RegExp || value instanceof URL)\n    return value;\n  if (Array.isArray(value)) {\n    const result3 = [];\n    for (const item of value)\n      result3.push(transformObject(item, mapping));\n    return result3;\n  }\n  const result2 = {};\n  for (const [key, prop] of Object.entries(value))\n    result2[key] = transformObject(prop, mapping);\n  return result2;\n}\nasync function transformObjectAsync(value, mapping) {\n  const result = await mapping(value);\n  if (result)\n    return result.result;\n  if (value === null || typeof value !== \"object\")\n    return value;\n  if (value instanceof Date || value instanceof RegExp || value instanceof URL)\n    return value;\n  if (Array.isArray(value)) {\n    const result3 = [];\n    for (const item of value)\n      result3.push(await transformObjectAsync(item, mapping));\n    return result3;\n  }\n  const result2 = {};\n  for (const [key, prop] of Object.entries(value))\n    result2[key] = await transformObjectAsync(prop, mapping);\n  return result2;\n}\n\n// packages/playwright-ct-core/src/injected/index.ts\nwindow.__pwRegistry = new ImportRegistry();\nwindow.__pwUnwrapObject = unwrapObject;\nwindow.__pwTransformObject = transformObject;\n";