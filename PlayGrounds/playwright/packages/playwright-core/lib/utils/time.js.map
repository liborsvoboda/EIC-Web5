{"version":3,"file":"time.js","names":["initialTime","process","hrtime","monotonicTime","seconds","nanoseconds"],"sources":["../../src/utils/time.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// The `process.hrtime()` returns a time from some arbitrary\n// date in the past; on certain systems, this is the time from the system boot.\n// The `monotonicTime()` converts this to milliseconds.\n//\n// For a Linux server with uptime of 36 days, the `monotonicTime()` value\n// will be 36 * 86400 * 1000 = 3_110_400_000, which is larger than\n// the maximum value that `setTimeout` accepts as an argument: 2_147_483_647.\n//\n// To make the `monotonicTime()` a reasonable value, we anchor\n// it to the time of the first import of this utility.\nconst initialTime = process.hrtime();\n\nexport function monotonicTime(): number {\n  const [seconds, nanoseconds] = process.hrtime(initialTime);\n  return seconds * 1000 + (nanoseconds / 1000 | 0) / 1000;\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAGC,OAAO,CAACC,MAAM,CAAC,CAAC;AAE7B,SAASC,aAAaA,CAAA,EAAW;EACtC,MAAM,CAACC,OAAO,EAAEC,WAAW,CAAC,GAAGJ,OAAO,CAACC,MAAM,CAACF,WAAW,CAAC;EAC1D,OAAOI,OAAO,GAAG,IAAI,GAAG,CAACC,WAAW,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI;AACzD","ignoreList":[]}