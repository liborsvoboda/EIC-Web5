{"version":3,"file":"zones.js","names":["_async_hooks","require","ZoneManager","constructor","_asyncLocalStorage","AsyncLocalStorage","run","type","data","func","previous","getStore","zone","Zone","zoneData","undefined","exitZones","printZones","zones","str","apiName","push","console","log","join","exports"],"sources":["../../src/utils/zones.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AsyncLocalStorage } from 'async_hooks';\n\nexport type ZoneType = 'apiZone' | 'expectZone' | 'stepZone';\n\nclass ZoneManager {\n  private readonly _asyncLocalStorage = new AsyncLocalStorage<Zone<unknown>|undefined>();\n\n  run<T, R>(type: ZoneType, data: T, func: () => R): R {\n    const previous = this._asyncLocalStorage.getStore();\n    const zone = new Zone(previous, type, data);\n    return this._asyncLocalStorage.run(zone, func);\n  }\n\n  zoneData<T>(type: ZoneType): T | undefined {\n    for (let zone = this._asyncLocalStorage.getStore(); zone; zone = zone.previous) {\n      if (zone.type === type)\n        return zone.data as T;\n    }\n    return undefined;\n  }\n\n  exitZones<R>(func: () => R): R {\n    return this._asyncLocalStorage.run(undefined, func);\n  }\n\n  printZones() {\n    const zones = [];\n    for (let zone = this._asyncLocalStorage.getStore(); zone; zone = zone.previous) {\n      let str = zone.type;\n      if (zone.type === 'apiZone')\n        str += `(${(zone.data as any).apiName})`;\n      zones.push(str);\n      \n    }\n    console.log('zones: ', zones.join(' -> '));\n  }\n}\n\nclass Zone<T> {\n  readonly type: ZoneType;\n  readonly data: T;\n  readonly previous: Zone<unknown> | undefined;\n\n  constructor(previous: Zone<unknown> | undefined, type: ZoneType, data: T) {\n    this.type = type;\n    this.data = data;\n    this.previous = previous;\n  }\n}\n\nexport const zones = new ZoneManager();\n"],"mappings":";;;;;;AAgBA,IAAAA,YAAA,GAAAC,OAAA;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA,MAAMC,WAAW,CAAC;EAAAC,YAAA;IAAA,KACCC,kBAAkB,GAAG,IAAIC,8BAAiB,CAA0B,CAAC;EAAA;EAEtFC,GAAGA,CAAOC,IAAc,EAAEC,IAAO,EAAEC,IAAa,EAAK;IACnD,MAAMC,QAAQ,GAAG,IAAI,CAACN,kBAAkB,CAACO,QAAQ,CAAC,CAAC;IACnD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACH,QAAQ,EAAEH,IAAI,EAAEC,IAAI,CAAC;IAC3C,OAAO,IAAI,CAACJ,kBAAkB,CAACE,GAAG,CAACM,IAAI,EAAEH,IAAI,CAAC;EAChD;EAEAK,QAAQA,CAAIP,IAAc,EAAiB;IACzC,KAAK,IAAIK,IAAI,GAAG,IAAI,CAACR,kBAAkB,CAACO,QAAQ,CAAC,CAAC,EAAEC,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAACF,QAAQ,EAAE;MAC9E,IAAIE,IAAI,CAACL,IAAI,KAAKA,IAAI,EACpB,OAAOK,IAAI,CAACJ,IAAI;IACpB;IACA,OAAOO,SAAS;EAClB;EAEAC,SAASA,CAAIP,IAAa,EAAK;IAC7B,OAAO,IAAI,CAACL,kBAAkB,CAACE,GAAG,CAACS,SAAS,EAAEN,IAAI,CAAC;EACrD;EAEAQ,UAAUA,CAAA,EAAG;IACX,MAAMC,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIN,IAAI,GAAG,IAAI,CAACR,kBAAkB,CAACO,QAAQ,CAAC,CAAC,EAAEC,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAACF,QAAQ,EAAE;MAC9E,IAAIS,GAAG,GAAGP,IAAI,CAACL,IAAI;MACnB,IAAIK,IAAI,CAACL,IAAI,KAAK,SAAS,EACzBY,GAAG,IAAI,IAAKP,IAAI,CAACJ,IAAI,CAASY,OAAO,GAAG;MAC1CF,KAAK,CAACG,IAAI,CAACF,GAAG,CAAC;IAEjB;IACAG,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEL,KAAK,CAACM,IAAI,CAAC,MAAM,CAAC,CAAC;EAC5C;AACF;AAEA,MAAMX,IAAI,CAAI;EAKZV,WAAWA,CAACO,QAAmC,EAAEH,IAAc,EAAEC,IAAO,EAAE;IAAA,KAJjED,IAAI;IAAA,KACJC,IAAI;IAAA,KACJE,QAAQ;IAGf,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,QAAQ,GAAGA,QAAQ;EAC1B;AACF;AAEO,MAAMQ,KAAK,GAAAO,OAAA,CAAAP,KAAA,GAAG,IAAIhB,WAAW,CAAC,CAAC","ignoreList":[]}