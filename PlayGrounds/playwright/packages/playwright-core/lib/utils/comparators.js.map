{"version":3,"file":"comparators.js","names":["_utilsBundle","require","_compare","pixelmatch","diff_match_patch","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","getComparator","mimeType","compareImages","bind","compareText","compareBuffersOrStrings","JPEG_JS_MAX_BUFFER_SIZE_IN_MB","actualBuffer","expectedBuffer","Buffer","errorMessage","compare","options","_options$comparator","_ref","validateBuffer","actual","PNG","sync","read","jpegjs","decode","maxMemoryUsageInMB","expected","size","width","Math","max","height","sizesMismatchError","resizeImage","diff","count","comparator","data","maxColorDeltaE94","_options$threshold","threshold","Error","maxDiffPixels1","maxDiffPixels","maxDiffPixels2","maxDiffPixelRatio","undefined","min","ratio","ceil","pixelsMismatchError","toFixed","write","buffer","pngMagicNumber","length","every","byte","index","jpegMagicNumber","toString","dmp","d","diff_main","diff_cleanupSemantic","diff_prettyTerminal","diffs","html","x","op","text","colors","green","reset","strikethrough","red","join","image","Uint8Array","y","to","from"],"sources":["../../src/utils/comparators.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { colors, jpegjs } from '../utilsBundle';\nconst pixelmatch = require('../third_party/pixelmatch');\nimport { compare } from '../image_tools/compare';\nconst { diff_match_patch, DIFF_INSERT, DIFF_DELETE, DIFF_EQUAL } = require('../third_party/diff_match_patch');\nimport { PNG } from '../utilsBundle';\n\nexport type ImageComparatorOptions = { threshold?: number, maxDiffPixels?: number, maxDiffPixelRatio?: number, comparator?: string };\nexport type ComparatorResult = { diff?: Buffer; errorMessage: string; } | null;\nexport type Comparator = (actualBuffer: Buffer | string, expectedBuffer: Buffer, options?: any) => ComparatorResult;\n\nexport function getComparator(mimeType: string): Comparator {\n  if (mimeType === 'image/png')\n    return compareImages.bind(null, 'image/png');\n  if (mimeType === 'image/jpeg')\n    return compareImages.bind(null, 'image/jpeg');\n  if (mimeType === 'text/plain')\n    return compareText;\n  return compareBuffersOrStrings;\n}\n\nconst JPEG_JS_MAX_BUFFER_SIZE_IN_MB = 5 * 1024; // ~5 GB\n\nfunction compareBuffersOrStrings(actualBuffer: Buffer | string, expectedBuffer: Buffer): ComparatorResult {\n  if (typeof actualBuffer === 'string')\n    return compareText(actualBuffer, expectedBuffer);\n  if (!actualBuffer || !(actualBuffer instanceof Buffer))\n    return { errorMessage: 'Actual result should be a Buffer or a string.' };\n  if (Buffer.compare(actualBuffer, expectedBuffer))\n    return { errorMessage: 'Buffers differ' };\n  return null;\n}\n\ntype ImageData = { width: number, height: number, data: Buffer };\n\nfunction compareImages(mimeType: string, actualBuffer: Buffer | string, expectedBuffer: Buffer, options: ImageComparatorOptions = {}): ComparatorResult {\n  if (!actualBuffer || !(actualBuffer instanceof Buffer))\n    return { errorMessage: 'Actual result should be a Buffer.' };\n  validateBuffer(expectedBuffer, mimeType);\n\n  let actual: ImageData = mimeType === 'image/png' ? PNG.sync.read(actualBuffer) : jpegjs.decode(actualBuffer, { maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB });\n  let expected: ImageData = mimeType === 'image/png' ? PNG.sync.read(expectedBuffer) : jpegjs.decode(expectedBuffer, { maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB });\n  const size = { width: Math.max(expected.width, actual.width), height: Math.max(expected.height, actual.height) };\n  let sizesMismatchError = '';\n  if (expected.width !== actual.width || expected.height !== actual.height) {\n    sizesMismatchError = `Expected an image ${expected.width}px by ${expected.height}px, received ${actual.width}px by ${actual.height}px. `;\n    actual = resizeImage(actual, size);\n    expected = resizeImage(expected, size);\n  }\n  const diff = new PNG({ width: size.width, height: size.height });\n  let count;\n  if (options.comparator === 'ssim-cie94') {\n    count = compare(expected.data, actual.data, diff.data, size.width, size.height, {\n      // All Î”E* formulae are originally designed to have the difference of 1.0 stand for a \"just noticeable difference\" (JND).\n      // See https://en.wikipedia.org/wiki/Color_difference#CIELAB_%CE%94E*\n      maxColorDeltaE94: 1.0,\n    });\n  } else if ((options.comparator ?? 'pixelmatch') === 'pixelmatch') {\n    count = pixelmatch(expected.data, actual.data, diff.data, size.width, size.height, {\n      threshold: options.threshold ?? 0.2,\n    });\n  } else {\n    throw new Error(`Configuration specifies unknown comparator \"${options.comparator}\"`);\n  }\n\n  const maxDiffPixels1 = options.maxDiffPixels;\n  const maxDiffPixels2 = options.maxDiffPixelRatio !== undefined ? expected.width * expected.height * options.maxDiffPixelRatio : undefined;\n  let maxDiffPixels;\n  if (maxDiffPixels1 !== undefined && maxDiffPixels2 !== undefined)\n    maxDiffPixels = Math.min(maxDiffPixels1, maxDiffPixels2);\n  else\n    maxDiffPixels = maxDiffPixels1 ?? maxDiffPixels2 ?? 0;\n  const ratio = Math.ceil(count / (expected.width * expected.height) * 100) / 100;\n  const pixelsMismatchError = count > maxDiffPixels ? `${count} pixels (ratio ${ratio.toFixed(2)} of all image pixels) are different.` : '';\n  if (pixelsMismatchError || sizesMismatchError)\n    return { errorMessage: sizesMismatchError + pixelsMismatchError, diff: PNG.sync.write(diff) };\n  return null;\n}\n\nfunction validateBuffer(buffer: Buffer, mimeType: string): void {\n  if (mimeType === 'image/png') {\n    const pngMagicNumber = [137, 80, 78, 71, 13, 10, 26, 10];\n    if (buffer.length < pngMagicNumber.length || !pngMagicNumber.every((byte, index) => buffer[index] === byte))\n      throw new Error('could not decode image as PNG.');\n  } else if (mimeType === 'image/jpeg') {\n    const jpegMagicNumber = [255, 216];\n    if (buffer.length < jpegMagicNumber.length || !jpegMagicNumber.every((byte, index) => buffer[index] === byte))\n      throw new Error('could not decode image as JPEG.');\n  }\n}\n\nfunction compareText(actual: Buffer | string, expectedBuffer: Buffer): ComparatorResult {\n  if (typeof actual !== 'string')\n    return { errorMessage: 'Actual result should be a string' };\n  const expected = expectedBuffer.toString('utf-8');\n  if (expected === actual)\n    return null;\n  const dmp = new diff_match_patch();\n  const d = dmp.diff_main(expected, actual);\n  dmp.diff_cleanupSemantic(d);\n  return {\n    errorMessage: diff_prettyTerminal(d)\n  };\n}\n\nfunction diff_prettyTerminal(diffs: [number, string][]) {\n  const html = [];\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0];    // Operation (insert, delete, equal)\n    const data = diffs[x][1];  // Text of change.\n    const text = data;\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = colors.green(text);\n        break;\n      case DIFF_DELETE:\n        html[x] = colors.reset(colors.strikethrough(colors.red(text)));\n        break;\n      case DIFF_EQUAL:\n        html[x] = text;\n        break;\n    }\n  }\n  return html.join('');\n}\n\nfunction resizeImage(image: ImageData, size: { width: number, height: number }): ImageData {\n  if (image.width === size.width && image.height === size.height)\n    return image;\n  const buffer = new Uint8Array(size.width * size.height * 4);\n  for (let y = 0; y < size.height; y++) {\n    for (let x = 0; x < size.width; x++) {\n      const to = (y * size.width + x) * 4;\n      if (y < image.height && x < image.width) {\n        const from = (y * image.width + x) * 4;\n        buffer[to] = image.data[from];\n        buffer[to + 1] = image.data[from + 1];\n        buffer[to + 2] = image.data[from + 2];\n        buffer[to + 3] = image.data[from + 3];\n      } else {\n        buffer[to] = 0;\n        buffer[to + 1] = 0;\n        buffer[to + 2] = 0;\n        buffer[to + 3] = 0;\n      }\n    }\n  }\n  return { data: Buffer.from(buffer), width: size.width, height: size.height };\n}\n"],"mappings":";;;;;;AAiBA,IAAAA,YAAA,GAAAC,OAAA;AAEA,IAAAC,QAAA,GAAAD,OAAA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAME,UAAU,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AAEvD,MAAM;EAAEG,gBAAgB;EAAEC,WAAW;EAAEC,WAAW;EAAEC;AAAW,CAAC,GAAGN,OAAO,CAAC,iCAAiC,CAAC;AAOtG,SAASO,aAAaA,CAACC,QAAgB,EAAc;EAC1D,IAAIA,QAAQ,KAAK,WAAW,EAC1B,OAAOC,aAAa,CAACC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC;EAC9C,IAAIF,QAAQ,KAAK,YAAY,EAC3B,OAAOC,aAAa,CAACC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC;EAC/C,IAAIF,QAAQ,KAAK,YAAY,EAC3B,OAAOG,WAAW;EACpB,OAAOC,uBAAuB;AAChC;AAEA,MAAMC,6BAA6B,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;;AAEhD,SAASD,uBAAuBA,CAACE,YAA6B,EAAEC,cAAsB,EAAoB;EACxG,IAAI,OAAOD,YAAY,KAAK,QAAQ,EAClC,OAAOH,WAAW,CAACG,YAAY,EAAEC,cAAc,CAAC;EAClD,IAAI,CAACD,YAAY,IAAI,EAAEA,YAAY,YAAYE,MAAM,CAAC,EACpD,OAAO;IAAEC,YAAY,EAAE;EAAgD,CAAC;EAC1E,IAAID,MAAM,CAACE,OAAO,CAACJ,YAAY,EAAEC,cAAc,CAAC,EAC9C,OAAO;IAAEE,YAAY,EAAE;EAAiB,CAAC;EAC3C,OAAO,IAAI;AACb;AAIA,SAASR,aAAaA,CAACD,QAAgB,EAAEM,YAA6B,EAAEC,cAAsB,EAAEI,OAA+B,GAAG,CAAC,CAAC,EAAoB;EAAA,IAAAC,mBAAA,EAAAC,IAAA;EACtJ,IAAI,CAACP,YAAY,IAAI,EAAEA,YAAY,YAAYE,MAAM,CAAC,EACpD,OAAO;IAAEC,YAAY,EAAE;EAAoC,CAAC;EAC9DK,cAAc,CAACP,cAAc,EAAEP,QAAQ,CAAC;EAExC,IAAIe,MAAiB,GAAGf,QAAQ,KAAK,WAAW,GAAGgB,gBAAG,CAACC,IAAI,CAACC,IAAI,CAACZ,YAAY,CAAC,GAAGa,mBAAM,CAACC,MAAM,CAACd,YAAY,EAAE;IAAEe,kBAAkB,EAAEhB;EAA8B,CAAC,CAAC;EACnK,IAAIiB,QAAmB,GAAGtB,QAAQ,KAAK,WAAW,GAAGgB,gBAAG,CAACC,IAAI,CAACC,IAAI,CAACX,cAAc,CAAC,GAAGY,mBAAM,CAACC,MAAM,CAACb,cAAc,EAAE;IAAEc,kBAAkB,EAAEhB;EAA8B,CAAC,CAAC;EACzK,MAAMkB,IAAI,GAAG;IAAEC,KAAK,EAAEC,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAACE,KAAK,EAAET,MAAM,CAACS,KAAK,CAAC;IAAEG,MAAM,EAAEF,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAACK,MAAM,EAAEZ,MAAM,CAACY,MAAM;EAAE,CAAC;EAChH,IAAIC,kBAAkB,GAAG,EAAE;EAC3B,IAAIN,QAAQ,CAACE,KAAK,KAAKT,MAAM,CAACS,KAAK,IAAIF,QAAQ,CAACK,MAAM,KAAKZ,MAAM,CAACY,MAAM,EAAE;IACxEC,kBAAkB,GAAG,qBAAqBN,QAAQ,CAACE,KAAK,SAASF,QAAQ,CAACK,MAAM,gBAAgBZ,MAAM,CAACS,KAAK,SAAST,MAAM,CAACY,MAAM,MAAM;IACxIZ,MAAM,GAAGc,WAAW,CAACd,MAAM,EAAEQ,IAAI,CAAC;IAClCD,QAAQ,GAAGO,WAAW,CAACP,QAAQ,EAAEC,IAAI,CAAC;EACxC;EACA,MAAMO,IAAI,GAAG,IAAId,gBAAG,CAAC;IAAEQ,KAAK,EAAED,IAAI,CAACC,KAAK;IAAEG,MAAM,EAAEJ,IAAI,CAACI;EAAO,CAAC,CAAC;EAChE,IAAII,KAAK;EACT,IAAIpB,OAAO,CAACqB,UAAU,KAAK,YAAY,EAAE;IACvCD,KAAK,GAAG,IAAArB,gBAAO,EAACY,QAAQ,CAACW,IAAI,EAAElB,MAAM,CAACkB,IAAI,EAAEH,IAAI,CAACG,IAAI,EAAEV,IAAI,CAACC,KAAK,EAAED,IAAI,CAACI,MAAM,EAAE;MAC9E;MACA;MACAO,gBAAgB,EAAE;IACpB,CAAC,CAAC;EACJ,CAAC,MAAM,IAAI,EAAAtB,mBAAA,GAACD,OAAO,CAACqB,UAAU,cAAApB,mBAAA,cAAAA,mBAAA,GAAI,YAAY,MAAM,YAAY,EAAE;IAAA,IAAAuB,kBAAA;IAChEJ,KAAK,GAAGrC,UAAU,CAAC4B,QAAQ,CAACW,IAAI,EAAElB,MAAM,CAACkB,IAAI,EAAEH,IAAI,CAACG,IAAI,EAAEV,IAAI,CAACC,KAAK,EAAED,IAAI,CAACI,MAAM,EAAE;MACjFS,SAAS,GAAAD,kBAAA,GAAExB,OAAO,CAACyB,SAAS,cAAAD,kBAAA,cAAAA,kBAAA,GAAI;IAClC,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,MAAM,IAAIE,KAAK,CAAC,+CAA+C1B,OAAO,CAACqB,UAAU,GAAG,CAAC;EACvF;EAEA,MAAMM,cAAc,GAAG3B,OAAO,CAAC4B,aAAa;EAC5C,MAAMC,cAAc,GAAG7B,OAAO,CAAC8B,iBAAiB,KAAKC,SAAS,GAAGpB,QAAQ,CAACE,KAAK,GAAGF,QAAQ,CAACK,MAAM,GAAGhB,OAAO,CAAC8B,iBAAiB,GAAGC,SAAS;EACzI,IAAIH,aAAa;EACjB,IAAID,cAAc,KAAKI,SAAS,IAAIF,cAAc,KAAKE,SAAS,EAC9DH,aAAa,GAAGd,IAAI,CAACkB,GAAG,CAACL,cAAc,EAAEE,cAAc,CAAC,CAAC,KAEzDD,aAAa,IAAA1B,IAAA,GAAGyB,cAAc,aAAdA,cAAc,cAAdA,cAAc,GAAIE,cAAc,cAAA3B,IAAA,cAAAA,IAAA,GAAI,CAAC;EACvD,MAAM+B,KAAK,GAAGnB,IAAI,CAACoB,IAAI,CAACd,KAAK,IAAIT,QAAQ,CAACE,KAAK,GAAGF,QAAQ,CAACK,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/E,MAAMmB,mBAAmB,GAAGf,KAAK,GAAGQ,aAAa,GAAG,GAAGR,KAAK,kBAAkBa,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,sCAAsC,GAAG,EAAE;EACzI,IAAID,mBAAmB,IAAIlB,kBAAkB,EAC3C,OAAO;IAAEnB,YAAY,EAAEmB,kBAAkB,GAAGkB,mBAAmB;IAAEhB,IAAI,EAAEd,gBAAG,CAACC,IAAI,CAAC+B,KAAK,CAAClB,IAAI;EAAE,CAAC;EAC/F,OAAO,IAAI;AACb;AAEA,SAAShB,cAAcA,CAACmC,MAAc,EAAEjD,QAAgB,EAAQ;EAC9D,IAAIA,QAAQ,KAAK,WAAW,EAAE;IAC5B,MAAMkD,cAAc,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACxD,IAAID,MAAM,CAACE,MAAM,GAAGD,cAAc,CAACC,MAAM,IAAI,CAACD,cAAc,CAACE,KAAK,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKL,MAAM,CAACK,KAAK,CAAC,KAAKD,IAAI,CAAC,EACzG,MAAM,IAAIhB,KAAK,CAAC,gCAAgC,CAAC;EACrD,CAAC,MAAM,IAAIrC,QAAQ,KAAK,YAAY,EAAE;IACpC,MAAMuD,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IAClC,IAAIN,MAAM,CAACE,MAAM,GAAGI,eAAe,CAACJ,MAAM,IAAI,CAACI,eAAe,CAACH,KAAK,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKL,MAAM,CAACK,KAAK,CAAC,KAAKD,IAAI,CAAC,EAC3G,MAAM,IAAIhB,KAAK,CAAC,iCAAiC,CAAC;EACtD;AACF;AAEA,SAASlC,WAAWA,CAACY,MAAuB,EAAER,cAAsB,EAAoB;EACtF,IAAI,OAAOQ,MAAM,KAAK,QAAQ,EAC5B,OAAO;IAAEN,YAAY,EAAE;EAAmC,CAAC;EAC7D,MAAMa,QAAQ,GAAGf,cAAc,CAACiD,QAAQ,CAAC,OAAO,CAAC;EACjD,IAAIlC,QAAQ,KAAKP,MAAM,EACrB,OAAO,IAAI;EACb,MAAM0C,GAAG,GAAG,IAAI9D,gBAAgB,CAAC,CAAC;EAClC,MAAM+D,CAAC,GAAGD,GAAG,CAACE,SAAS,CAACrC,QAAQ,EAAEP,MAAM,CAAC;EACzC0C,GAAG,CAACG,oBAAoB,CAACF,CAAC,CAAC;EAC3B,OAAO;IACLjD,YAAY,EAAEoD,mBAAmB,CAACH,CAAC;EACrC,CAAC;AACH;AAEA,SAASG,mBAAmBA,CAACC,KAAyB,EAAE;EACtD,MAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACX,MAAM,EAAEa,CAAC,EAAE,EAAE;IACrC,MAAMC,EAAE,GAAGH,KAAK,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAI;IAC3B,MAAM/B,IAAI,GAAG6B,KAAK,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;IAC3B,MAAME,IAAI,GAAGjC,IAAI;IACjB,QAAQgC,EAAE;MACR,KAAKrE,WAAW;QACdmE,IAAI,CAACC,CAAC,CAAC,GAAGG,mBAAM,CAACC,KAAK,CAACF,IAAI,CAAC;QAC5B;MACF,KAAKrE,WAAW;QACdkE,IAAI,CAACC,CAAC,CAAC,GAAGG,mBAAM,CAACE,KAAK,CAACF,mBAAM,CAACG,aAAa,CAACH,mBAAM,CAACI,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC;QAC9D;MACF,KAAKpE,UAAU;QACbiE,IAAI,CAACC,CAAC,CAAC,GAAGE,IAAI;QACd;IACJ;EACF;EACA,OAAOH,IAAI,CAACS,IAAI,CAAC,EAAE,CAAC;AACtB;AAEA,SAAS3C,WAAWA,CAAC4C,KAAgB,EAAElD,IAAuC,EAAa;EACzF,IAAIkD,KAAK,CAACjD,KAAK,KAAKD,IAAI,CAACC,KAAK,IAAIiD,KAAK,CAAC9C,MAAM,KAAKJ,IAAI,CAACI,MAAM,EAC5D,OAAO8C,KAAK;EACd,MAAMxB,MAAM,GAAG,IAAIyB,UAAU,CAACnD,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC;EAC3D,KAAK,IAAIgD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpD,IAAI,CAACI,MAAM,EAAEgD,CAAC,EAAE,EAAE;IACpC,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzC,IAAI,CAACC,KAAK,EAAEwC,CAAC,EAAE,EAAE;MACnC,MAAMY,EAAE,GAAG,CAACD,CAAC,GAAGpD,IAAI,CAACC,KAAK,GAAGwC,CAAC,IAAI,CAAC;MACnC,IAAIW,CAAC,GAAGF,KAAK,CAAC9C,MAAM,IAAIqC,CAAC,GAAGS,KAAK,CAACjD,KAAK,EAAE;QACvC,MAAMqD,IAAI,GAAG,CAACF,CAAC,GAAGF,KAAK,CAACjD,KAAK,GAAGwC,CAAC,IAAI,CAAC;QACtCf,MAAM,CAAC2B,EAAE,CAAC,GAAGH,KAAK,CAACxC,IAAI,CAAC4C,IAAI,CAAC;QAC7B5B,MAAM,CAAC2B,EAAE,GAAG,CAAC,CAAC,GAAGH,KAAK,CAACxC,IAAI,CAAC4C,IAAI,GAAG,CAAC,CAAC;QACrC5B,MAAM,CAAC2B,EAAE,GAAG,CAAC,CAAC,GAAGH,KAAK,CAACxC,IAAI,CAAC4C,IAAI,GAAG,CAAC,CAAC;QACrC5B,MAAM,CAAC2B,EAAE,GAAG,CAAC,CAAC,GAAGH,KAAK,CAACxC,IAAI,CAAC4C,IAAI,GAAG,CAAC,CAAC;MACvC,CAAC,MAAM;QACL5B,MAAM,CAAC2B,EAAE,CAAC,GAAG,CAAC;QACd3B,MAAM,CAAC2B,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;QAClB3B,MAAM,CAAC2B,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;QAClB3B,MAAM,CAAC2B,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;MACpB;IACF;EACF;EACA,OAAO;IAAE3C,IAAI,EAAEzB,MAAM,CAACqE,IAAI,CAAC5B,MAAM,CAAC;IAAEzB,KAAK,EAAED,IAAI,CAACC,KAAK;IAAEG,MAAM,EAAEJ,IAAI,CAACI;EAAO,CAAC;AAC9E","ignoreList":[]}