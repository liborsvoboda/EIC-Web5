{"version":3,"file":"traceUtils.js","names":["parseClientSideCallMetadata","data","result","Map","files","stacks","s","id","ff","set","map","f","file","line","column","function"],"sources":["../../../src/utils/isomorphic/traceUtils.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { StackFrame } from '@protocol/channels';\n\nexport type SerializedStackFrame = [number, number, number, string];\nexport type SerializedStack = [number, SerializedStackFrame[]];\n\nexport type SerializedClientSideCallMetadata = {\n  files: string[];\n  stacks: SerializedStack[];\n};\n\nexport function parseClientSideCallMetadata(data: SerializedClientSideCallMetadata): Map<string, StackFrame[]> {\n  const result = new Map<string, StackFrame[]>();\n  const { files, stacks } = data;\n  for (const s of stacks) {\n    const [id, ff] = s;\n    result.set(`call@${id}`, ff.map(f => ({ file: files[f[0]], line: f[1], column: f[2], function: f[3] })));\n  }\n  return result;\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYO,SAASA,2BAA2BA,CAACC,IAAsC,EAA6B;EAC7G,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAuB,CAAC;EAC9C,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGJ,IAAI;EAC9B,KAAK,MAAMK,CAAC,IAAID,MAAM,EAAE;IACtB,MAAM,CAACE,EAAE,EAAEC,EAAE,CAAC,GAAGF,CAAC;IAClBJ,MAAM,CAACO,GAAG,CAAC,QAAQF,EAAE,EAAE,EAAEC,EAAE,CAACE,GAAG,CAACC,CAAC,KAAK;MAAEC,IAAI,EAAER,KAAK,CAACO,CAAC,CAAC,CAAC,CAAC,CAAC;MAAEE,IAAI,EAAEF,CAAC,CAAC,CAAC,CAAC;MAAEG,MAAM,EAAEH,CAAC,CAAC,CAAC,CAAC;MAAEI,QAAQ,EAAEJ,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,CAAC,CAAC;EAC1G;EACA,OAAOT,MAAM;AACf","ignoreList":[]}